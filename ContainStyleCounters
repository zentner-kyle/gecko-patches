# HG changeset patch
# User Kyle Zentner <kzentner@mozilla.com>
# Parent  f0f73531fe97fa53ebff22640800d18009c9b2b8
Bug 1172087 - Patch 1: Implement counter behavior for "contain: style"

diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -4763,16 +4763,18 @@ nsCSSFrameConstructor::InitAndRestoreFra
   aNewFrame->Init(aContent, aParentFrame, nullptr);
   aNewFrame->AddStateBits(aState.mAdditionalStateBits);
 
   if (aState.mFrameState) {
     // Restore frame state for just the newly created frame.
     RestoreFrameStateFor(aNewFrame, aState.mFrameState);
   }
 
+  nsCounterScopePush saveCounters(&mCounterManager, aNewFrame,
+                                  aNewFrame->StyleDisplay()->IsContainStyle());
   if (aAllowCounters &&
       mCounterManager.AddCounterResetsAndIncrements(aNewFrame)) {
     CountersDirty();
   }
 }
 
 already_AddRefed<nsStyleContext>
 nsCSSFrameConstructor::ResolveStyleContext(nsIFrame*         aParentFrame,
diff --git a/layout/base/nsCounterManager.cpp b/layout/base/nsCounterManager.cpp
--- a/layout/base/nsCounterManager.cpp
+++ b/layout/base/nsCounterManager.cpp
@@ -76,20 +76,24 @@ void nsCounterUseNode::Calc(nsCounterLis
 // assign the correct |mValueAfter| value to a node that has been inserted
 // Should be called immediately after calling |Insert|.
 void nsCounterChangeNode::Calc(nsCounterList *aList)
 {
     NS_ASSERTION(!aList->IsDirty(),
                  "Why are we calculating with a dirty list?");
     if (mType == RESET) {
         mValueAfter = mChangeValue;
-    } else {
-        NS_ASSERTION(mType == INCREMENT, "invalid type");
+    } else if (mType == INCREMENT) {
         mValueAfter = nsCounterManager::IncrementCounter(aList->ValueBefore(this),
                                                          mChangeValue);
+    } else /* if (mType == ROOT) */ {
+        NS_ASSERTION(mType == ROOT, "invalid type");
+        // Root has no effect on the next sibling, but acts like a root in
+        // nsCounterList::ValueBefore.
+        mValueAfter = aList->ValueBefore(this);
     }
 }
 
 // The text that should be displayed for this counter.
 void
 nsCounterUseNode::GetText(nsString& aResult)
 {
     aResult.Truncate();
@@ -135,51 +139,92 @@ nsCounterList::SetScope(nsCounterNode *a
     // appropriate.
 
     if (aNode == First()) {
         aNode->mScopeStart = nullptr;
         aNode->mScopePrev = nullptr;
         return;
     }
 
-    // Get the content node for aNode's rendering object's *parent*,
-    // since scope includes siblings, so we want a descendant check on
-    // parents.
+    // Get the content node for |aNode|'s rendering object's *parent*.
+    // Since reset-counter scopes include siblings, we can perform a descendant
+    // check on parents to test for a valid scoping.
     nsIContent *nodeContent = aNode->mPseudoFrame->GetContent()->GetParent();
 
-    for (nsCounterNode *prev = Prev(aNode), *start;
+    nsCounterNode *start;
+    for (nsCounterNode *prev = Prev(aNode);
          prev; prev = start->mScopePrev) {
-        // If |prev| starts a scope (because it's a real or implied
-        // reset), we want it as the scope start rather than the start
-        // of its enclosing scope.  Otherwise, there's no enclosing
-        // scope, so the next thing in prev's scope shares its scope
-        // start.
-        start = (prev->mType == nsCounterNode::RESET || !prev->mScopeStart)
+
+        // If |prev| starts a scope , we want it as the scope start rather than
+        // the start of its enclosing scope.  Otherwise, there's no enclosing
+        // scope, so the next thing in prev's scope shares its scope start.
+        start = (prev->mType == nsCounterNode::RESET ||
+                 prev->mType == nsCounterNode::ROOT  ||
+                 !prev->mScopeStart)
                   ? prev : prev->mScopeStart;
 
+
         // |startContent| is analogous to |nodeContent| (see above).
         nsIContent *startContent = start->mPseudoFrame->GetContent()->GetParent();
         NS_ASSERTION(nodeContent || !startContent,
                      "null check on startContent should be sufficient to "
-                     "null check nodeContent as well, since if nodeContent "
-                     "is for the root, startContent (which is before it) "
-                     "must be too");
+                     "null check nodeContent as well, since if |aNode| "
+                     "advanced above the document root, |start| (which "
+                     "is before it) must have too");
 
+        if (aNode->mType == nsCounterNode::RESET &&
+            nodeContent == startContent) {
              // A reset's outer scope can't be a scope created by a sibling.
-        if (!(aNode->mType == nsCounterNode::RESET &&
-              nodeContent == startContent) &&
-              // everything is inside the root (except the case above,
-              // a second reset on the root)
-            (!startContent ||
-             nsContentUtils::ContentIsDescendantOf(nodeContent,
-                                                   startContent))) {
-            aNode->mScopeStart = start;
-            aNode->mScopePrev  = prev;
-            return;
+            continue;
         }
+
+        bool isRootScoped = false;
+
+        // If |start| is a ROOT node, or a RESET on an element that also has a
+        // ROOT node, we need to enforce that |aNode| is a descendant of
+        // |start|.
+        if (start->mType == nsCounterNode::ROOT ||
+            (start->mType == nsCounterNode::RESET &&
+             Prev(start) && Prev(start)->mType == nsCounterNode::ROOT &&
+             start->mPseudoFrame == Prev(start)->mPseudoFrame)) {
+            // |start| is either a ROOT or a RESET for an element which has a
+            // ROOT.
+            isRootScoped = true;
+        }
+
+        if (isRootScoped) {
+            // In order for |start| to begin scope in this case, |aNode| must
+            // have the same element as |start|, or |aNode| must be a
+            // descendant of |start|.
+
+            // If either of these cases does not hold, keep looking.
+            if (start->mPseudoFrame != aNode->mPseudoFrame &&
+                !nsContentUtils::ContentIsDescendantOf(
+                    aNode->mPseudoFrame->GetContent(),
+                    start->mPseudoFrame->GetContent())) {
+                continue;
+            }
+        } else {
+            // Check that |aNode|'s parent is a descendant of |start|'s
+            // parent.
+            // This implies that |aNode|'s is itself a sibling of |start|, or
+            // |aNode| is a descendant of one of the siblings of |start|, which
+            // is the condition for being scoped to |start|, if |start| is a
+            // normal RESET node.
+            if (startContent &&
+                !nsContentUtils::ContentIsDescendantOf(nodeContent,
+                                                        startContent)) {
+                continue;
+            }
+        }
+
+        aNode->mScopeStart = start;
+        aNode->mScopePrev  = prev;
+
+        return;
     }
 
     aNode->mScopeStart = nullptr;
     aNode->mScopePrev  = nullptr;
 }
 
 void
 nsCounterList::RecalcAll()
@@ -205,16 +250,17 @@ nsCounterList::RecalcAll()
                 useNode->mText->SetData(text);
             }
         }
     } while ((node = Next(node)) != First());
 }
 
 nsCounterManager::nsCounterManager()
     : mNames()
+    , mPrototypeList()
 {
 }
 
 bool
 nsCounterManager::AddCounterResetsAndIncrements(nsIFrame *aFrame)
 {
     const nsStyleContent *styleContent = aFrame->StyleContent();
     if (!styleContent->CounterIncrementCount() &&
@@ -239,43 +285,79 @@ nsCounterManager::AddCounterResetsAndInc
 bool
 nsCounterManager::AddResetOrIncrement(nsIFrame *aFrame, int32_t aIndex,
                                       const nsStyleCounterData *aCounterData,
                                       nsCounterNode::Type aType)
 {
     nsCounterChangeNode *node =
         new nsCounterChangeNode(aFrame, aType, aCounterData->mValue, aIndex);
 
-    nsCounterList *counterList = CounterListFor(aCounterData->mCounter);
+    bool newListCreated = false;
+    nsCounterList *counterList = CounterListFor(aCounterData->mCounter, &newListCreated);
 
     counterList->Insert(node);
     if (!counterList->IsLast(node)) {
         // Tell the caller it's responsible for recalculating the entire
         // list.
         counterList->SetDirty();
         return true;
     }
 
     // Don't call Calc() if the list is already dirty -- it'll be recalculated
     // anyway, and trying to calculate with a dirty list doesn't work.
     if (MOZ_LIKELY(!counterList->IsDirty())) {
         node->Calc(counterList);
     }
-    return false;
+    return newListCreated;
+}
+
+struct AddRootArgs {
+    nsIFrame* mFrame;
+    bool mDirty;
+};
+
+static void
+AddRootInner(nsCounterList* aList, nsIFrame* aFrame, bool& aDirty) {
+    // XXX Is it safe to always use 0 as the index?
+    nsCounterChangeNode *node =
+        new nsCounterChangeNode(aFrame, nsCounterNode::ROOT, 0, 0);
+    aList->Insert(node);
+    if (!aList->IsLast(node)) {
+        aList->SetDirty();
+        aDirty |= true;
+    }
+}
+
+static PLDHashOperator
+AddRoot(const nsAString& aKey, nsCounterList* aList, void* aArgs) {
+    struct AddRootArgs* args = static_cast<AddRootArgs*>(aArgs);
+    AddRootInner(aList, args->mFrame, args->mDirty);
+    return PL_DHASH_NEXT;
+}
+
+bool
+nsCounterManager::AddRoots(nsIFrame *aFrame) {
+    struct AddRootArgs args = { aFrame, false };
+    mNames.EnumerateRead(AddRoot, static_cast<void*>(&args));
+    AddRootInner(&mPrototypeList, aFrame, args.mDirty);
+    return args.mDirty;
 }
 
 nsCounterList*
-nsCounterManager::CounterListFor(const nsSubstring& aCounterName)
+nsCounterManager::CounterListFor(const nsSubstring& aCounterName, bool* aNewListCreated)
 {
     // XXX Why doesn't nsTHashtable provide an API that allows us to use
     // get/put in one hashtable lookup?
     nsCounterList *counterList;
     if (!mNames.Get(aCounterName, &counterList)) {
-        counterList = new nsCounterList();
+        counterList = new nsCounterList(mPrototypeList);
         mNames.Put(aCounterName, counterList);
+        if (aNewListCreated) {
+          *aNewListCreated = true;
+        }
     }
     return counterList;
 }
 
 static PLDHashOperator
 RecalcDirtyLists(const nsAString& aKey, nsCounterList* aList, void* aClosure)
 {
     if (aList->IsDirty())
@@ -323,62 +405,74 @@ struct DestroyNodesData {
         , mDestroyedAny(false)
     {
     }
 
     nsIFrame *mFrame;
     bool mDestroyedAny;
 };
 
+static void
+DestroyNodesInListInner(nsCounterList* aList, DestroyNodesData* aData) {
+    if (aList->DestroyNodesFor(aData->mFrame)) {
+        aData->mDestroyedAny = true;
+        aList->SetDirty();
+    }
+}
+
 static PLDHashOperator
 DestroyNodesInList(const nsAString& aKey, nsCounterList* aList, void* aClosure)
 {
-    DestroyNodesData *data = static_cast<DestroyNodesData*>(aClosure);
-    if (aList->DestroyNodesFor(data->mFrame)) {
-        data->mDestroyedAny = true;
-        aList->SetDirty();
-    }
+    DestroyNodesInListInner(aList, static_cast<DestroyNodesData*>(aClosure));
     return PL_DHASH_NEXT;
 }
 
 bool
 nsCounterManager::DestroyNodesFor(nsIFrame *aFrame)
 {
     DestroyNodesData data(aFrame);
     mNames.EnumerateRead(DestroyNodesInList, &data);
+    DestroyNodesInListInner(&mPrototypeList, &data);
     return data.mDestroyedAny;
 }
 
 #ifdef DEBUG
-static PLDHashOperator
-DumpList(const nsAString& aKey, nsCounterList* aList, void* aClosure)
-{
-    printf("Counter named \"%s\":\n", NS_ConvertUTF16toUTF8(aKey).get());
+static void
+DumpListInner(nsCounterList* aList) {
     nsCounterNode *node = aList->First();
 
     if (node) {
         int32_t i = 0;
         do {
-            const char *types[] = { "RESET", "INCREMENT", "USE" };
+            const char *types[] = { "ROOT", "RESET", "INCREMENT", "USE" };
             printf("  Node #%d @%p frame=%p index=%d type=%s valAfter=%d\n"
                    "       scope-start=%p scope-prev=%p",
                    i++, (void*)node, (void*)node->mPseudoFrame,
                    node->mContentIndex, types[node->mType], node->mValueAfter,
                    (void*)node->mScopeStart, (void*)node->mScopePrev);
             if (node->mType == nsCounterNode::USE) {
                 nsAutoString text;
                 node->UseNode()->GetText(text);
                 printf(" text=%s", NS_ConvertUTF16toUTF8(text).get());
             }
             printf("\n");
         } while ((node = aList->Next(node)) != aList->First());
     }
+}
+
+static PLDHashOperator
+DumpList(const nsAString& aKey, nsCounterList* aList, void* aClosure)
+{
+    printf("Counter named \"%s\":\n", NS_ConvertUTF16toUTF8(aKey).get());
+    DumpListInner(aList);
     return PL_DHASH_NEXT;
 }
 
 void
 nsCounterManager::Dump()
 {
     printf("\n\nCounter Manager Lists:\n");
     mNames.EnumerateRead(DumpList, nullptr);
+    printf("Counter Prototype List:\n");
+    DumpListInner(&mPrototypeList);
     printf("\n\n");
 }
 #endif
diff --git a/layout/base/nsCounterManager.h b/layout/base/nsCounterManager.h
--- a/layout/base/nsCounterManager.h
+++ b/layout/base/nsCounterManager.h
@@ -17,19 +17,20 @@
 #include "CounterStyleManager.h"
 
 class nsCounterList;
 struct nsCounterUseNode;
 struct nsCounterChangeNode;
 
 struct nsCounterNode : public nsGenConNode {
     enum Type {
+        ROOT,      // a "layout" or "strict"  in 'contain'
         RESET,     // a "counter number" pair in 'counter-reset'
         INCREMENT, // a "counter number" pair in 'counter-increment'
-        USE        // counter() or counters() in 'content'
+        USE,       // counter() or counters() in 'content'
     };
 
     Type mType;
 
     // Counter value after this node
     int32_t mValueAfter;
 
     // mScopeStart points to the node (usually a RESET, but not in the
@@ -96,16 +97,25 @@ struct nsCounterUseNode : public nsCount
         , mCounterFunction(aCounterFunction)
         , mPresContext(aPresContext)
         , mCounterStyle(nullptr)
         , mAllCounters(aAllCounters)
     {
         NS_ASSERTION(aContentIndex <= INT32_MAX, "out of range");
     }
 
+    nsCounterUseNode(const nsCounterUseNode& aNode)
+        : nsCounterNode(aNode.mContentIndex, USE)
+        , mCounterFunction(aNode.mCounterFunction)
+        , mPresContext(aNode.mPresContext)
+        , mCounterStyle(aNode.mCounterStyle)
+        , mAllCounters(aNode.mAllCounters)
+    {
+    }
+
     virtual bool InitTextFrame(nsGenConList* aList,
             nsIFrame* aPseudoFrame, nsIFrame* aTextFrame) override;
 
     mozilla::CounterStyle* GetCounterStyle();
     void SetCounterStyleDirty()
     {
         mCounterStyle = nullptr;
     }
@@ -128,59 +138,86 @@ struct nsCounterChangeNode : public nsCo
     // 'counter-increment' or 'counter-reset' property.
     nsCounterChangeNode(nsIFrame* aPseudoFrame,
                         nsCounterNode::Type aChangeType,
                         int32_t aChangeValue,
                         int32_t aPropIndex)
         : nsCounterNode(// Fake a content index for resets and increments
                         // that comes before all the real content, with
                         // the resets first, in order, and then the increments.
-                        aPropIndex + (aChangeType == RESET
-                                        ? (INT32_MIN) 
-                                        : (INT32_MIN / 2)),
+                        aPropIndex +
+                        (aChangeType == ROOT         ? (INT32_MIN) :
+                         aChangeType == RESET        ? (2 * (INT32_MIN / 3))
+                      /* aChangeType == INCREMENT */ : (INT32_MIN / 3)),
                         aChangeType)
         , mChangeValue(aChangeValue)
     {
         NS_ASSERTION(aPropIndex >= 0, "out of range");
-        NS_ASSERTION(aChangeType == INCREMENT || aChangeType == RESET,
+        NS_ASSERTION(aChangeType == INCREMENT || aChangeType == RESET ||
+                     mType == ROOT,
                      "bad type");
         mPseudoFrame = aPseudoFrame;
         CheckFrameAssertions();
     }
 
+    nsCounterChangeNode(const nsCounterChangeNode& aNode)
+        : nsCounterNode(aNode.mContentIndex, aNode.mType)
+        , mChangeValue(aNode.mChangeValue)
+    {
+        mPseudoFrame = aNode.mPseudoFrame;
+        CheckFrameAssertions();
+    }
+
     // assign the correct |mValueAfter| value to a node that has been inserted
     // Should be called immediately after calling |Insert|.
     void Calc(nsCounterList* aList);
 };
 
 inline nsCounterUseNode* nsCounterNode::UseNode()
 {
     NS_ASSERTION(mType == USE, "wrong type");
     return static_cast<nsCounterUseNode*>(this);
 }
 
 inline nsCounterChangeNode* nsCounterNode::ChangeNode()
 {
-    NS_ASSERTION(mType == INCREMENT || mType == RESET, "wrong type");
+    NS_ASSERTION(mType == INCREMENT || mType == RESET || mType == ROOT,
+                 "wrong type");
     return static_cast<nsCounterChangeNode*>(this);
 }
 
 inline void nsCounterNode::Calc(nsCounterList* aList)
 {
     if (mType == USE)
         UseNode()->Calc(aList);
     else
         ChangeNode()->Calc(aList);
 }
 
 class nsCounterList : public nsGenConList {
 public:
     nsCounterList() : nsGenConList(),
                       mDirty(false)
     {}
+    nsCounterList(const nsCounterList& aList)
+        : nsGenConList()
+        , mDirty(aList.mDirty)
+    {
+        nsCounterList& mutableList = const_cast<nsCounterList&>(aList);
+        nsCounterNode *node = mutableList.First();
+        if (node) {
+            do {
+                if (node->mType == nsCounterNode::USE) {
+                    Insert(new nsCounterUseNode(*node->UseNode()));
+                } else {
+                    Insert(new nsCounterChangeNode(*node->ChangeNode()));
+                }
+            } while ((node = mutableList.Next(node)) != mutableList.First());
+        }
+    }
 
     void Insert(nsCounterNode* aNode) {
         nsGenConList::Insert(aNode);
         // Don't SetScope if we're dirty -- we'll reset all the scopes anyway,
         // and we can't usefully compute scopes right now.
         if (MOZ_LIKELY(!IsDirty())) {
             SetScope(aNode);
         }
@@ -193,16 +230,23 @@ public:
     static nsCounterNode* Next(nsCounterNode* aNode) {
         return static_cast<nsCounterNode*>(nsGenConList::Next(aNode));
     }
     static nsCounterNode* Prev(nsCounterNode* aNode) {
         return static_cast<nsCounterNode*>(nsGenConList::Prev(aNode));
     }
 
     static int32_t ValueBefore(nsCounterNode* aNode) {
+        if (aNode->mScopePrev &&
+            aNode->mScopePrev->mType == nsCounterNode::ROOT &&
+            aNode->mScopePrev == aNode->mScopeStart) {
+          // If we are the first node in our scope, and our scope starts with a
+          // ROOT, the value "before" us is 0.
+          return 0;
+        }
         return aNode->mScopePrev ? aNode->mScopePrev->mValueAfter : 0;
     }
 
     // Correctly set |aNode->mScopeStart| and |aNode->mScopePrev|
     void SetScope(nsCounterNode *aNode);
 
     // Recalculate |mScopeStart|, |mScopePrev|, and |mValueAfter| for
     // all nodes and update text in text content nodes.
@@ -215,37 +259,44 @@ private:
     bool mDirty;
 };
 
 /**
  * The counter manager maintains an |nsCounterList| for each named
  * counter to keep track of all scopes with that name.
  */
 class nsCounterManager {
+    friend class nsCounterScopePush;
+    // Add ROOT elements 'owned' by aFrame to every counter.
+    bool AddRoots(nsIFrame *aFrame);
+
 public:
     nsCounterManager();
     // Returns true if dirty
     bool AddCounterResetsAndIncrements(nsIFrame *aFrame);
 
     // Gets the appropriate counter list, creating it if necessary.
     // Guaranteed to return non-null. (Uses an infallible hashtable API.)
-    nsCounterList* CounterListFor(const nsSubstring& aCounterName);
+    nsCounterList* CounterListFor(const nsSubstring& aCounterName, bool* newListCreated = nullptr);
 
     // Clean up data in any dirty counter lists.
     void RecalcAll();
 
     // Set all counter styles dirty
     void SetAllCounterStylesDirty();
 
     // Destroy nodes for the frame in any lists, and return whether any
     // nodes were destroyed.
     bool DestroyNodesFor(nsIFrame *aFrame);
 
     // Clear all data.
-    void Clear() { mNames.Clear(); }
+    void Clear() {
+        mNames.Clear(); 
+        mPrototypeList.Clear();
+    }
 
 #ifdef DEBUG
     void Dump();
 #endif
 
     static int32_t IncrementCounter(int32_t aOldValue, int32_t aIncrement)
     {
         // Addition of unsigned values is defined to be arithmetic
@@ -272,11 +323,26 @@ public:
 
 private:
     // for |AddCounterResetsAndIncrements| only
     bool AddResetOrIncrement(nsIFrame *aFrame, int32_t aIndex,
                                const nsStyleCounterData *aCounterData,
                                nsCounterNode::Type aType);
 
     nsClassHashtable<nsStringHashKey, nsCounterList> mNames;
+    nsCounterList mPrototypeList;
+};
+
+// This class exists to help implement 'contain: style'.
+// It currenctly can be replaced by a function call on the nsCounterManager.
+// However, it should be possible to create ROOT nodes lazily using this
+// design. Unfortunately, my attempts to do so missed some corner cases and
+// were abandoned.
+class nsCounterScopePush {
+public:
+  nsCounterScopePush(nsCounterManager* aManager, nsIFrame* aFrame, bool aUse) {
+      if (aUse) {
+          aManager->AddRoots(aFrame);
+      }
+  }
 };
 
 #endif /* nsCounterManager_h_ */
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -2244,16 +2244,20 @@ struct nsStyleDisplay {
 
   bool IsScrollableOverflow() const {
     // mOverflowX and mOverflowY always match when one of them is
     // NS_STYLE_OVERFLOW_VISIBLE or NS_STYLE_OVERFLOW_CLIP.
     return mOverflowX != NS_STYLE_OVERFLOW_VISIBLE &&
            mOverflowX != NS_STYLE_OVERFLOW_CLIP;
   }
 
+  bool IsContainStyle() const {
+    return NS_STYLE_CONTAIN_STYLE & mContain;
+  }
+
   bool IsContainPaint() const {
     return NS_STYLE_CONTAIN_PAINT & mContain;
   }
 
   /* Returns whether the element has the -moz-transform property
    * or a related property. */
   bool HasTransformStyle() const {
     return mSpecifiedTransform != nullptr ||
