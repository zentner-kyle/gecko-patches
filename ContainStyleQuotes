# HG changeset patch
# User Kyle Zentner <kzentner@mozilla.com>
# Parent  018615dea91cb0d23160fc74de196316cac851ce
Bug 1172087 - Patch 3: Implement quote behavior for "contain: style"

diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -1701,16 +1701,19 @@ nsCSSFrameConstructor::CreateGeneratedCo
       }
 
       break;
     }
 
   case eStyleContentType_Uninitialized:
     NS_NOTREACHED("uninitialized content type");
     return nullptr;
+  case eStyleContentType_ScopeStart:
+    NS_NOTREACHED("scope start content type");
+    return nullptr;
   } // switch
 
   return nullptr;
 }
 
 /*
  * aParentFrame - the frame that should be the parent of the generated
  *   content.  This is the frame for the corresponding content node,
@@ -10337,16 +10340,24 @@ nsCSSFrameConstructor::ProcessChildren(n
   if (mCurrentDepth != UINT16_MAX) {
     ++mCurrentDepth;
   }
 
   if (!aPossiblyLeafFrame) {
     aPossiblyLeafFrame = aFrame;
   }
 
+  if (aFrame->StyleDisplay()->IsContainStyle()) {
+    // A negative content index is needed to indicate that the quote depth is
+    // being changed by this node. Any negative value will do, so -1 is used.
+    (new nsQuoteNode(eStyleContentType_ScopeStart, -1))
+      // Insert the node into the list, with no text frame.
+      ->InitTextFrame(&mQuoteList, aFrame, nullptr);
+  }
+
   // XXXbz ideally, this would do all the pushing of various
   // containing blocks as needed, so callers don't have to do it...
 
   bool haveFirstLetterStyle = false, haveFirstLineStyle = false;
   if (aAllowBlockStyles) {
     ShouldHaveSpecialBlockStyle(aContent, aStyleContext, &haveFirstLetterStyle,
                                 &haveFirstLineStyle);
   }
diff --git a/layout/base/nsQuoteList.cpp b/layout/base/nsQuoteList.cpp
--- a/layout/base/nsQuoteList.cpp
+++ b/layout/base/nsQuoteList.cpp
@@ -26,16 +26,48 @@ nsQuoteNode::InitTextFrame(nsGenConList*
 
   // Don't set up text for 'no-open-quote' and 'no-close-quote'.
   if (IsRealQuote()) {
     aTextFrame->GetContent()->SetText(*Text(), false);
   }
   return dirty;
 }
 
+static bool IsDescendantOf(nsQuoteNode *aParent, nsQuoteNode *aChild)
+{
+  nsIFrame *pFrame, *cFrame;
+  nsIContent *pContent, *cContent;
+  if (aParent && aChild &&
+      // These are all assignments, not equality checks.
+      (pFrame = aParent->mPseudoFrame) &&
+      (cFrame = aChild->mPseudoFrame) &&
+      (pContent = pFrame->GetContent()) &&
+      (cContent = cFrame->GetContent()) &&
+      nsContentUtils::ContentIsDescendantOf(cContent, pContent)) {
+    return true;
+  }
+  return false;
+}
+
+// Scans up the scopes for a node before this node (starting at aPrevNode),
+// until a parent node is found.
+void
+nsQuoteNode::UpdateScope(nsQuoteNode *aPrevNode)
+{
+  for (nsQuoteNode *node = aPrevNode;
+       node && node != this;
+       node = node->mScopeStart) {
+    if (node->mType == eStyleContentType_ScopeStart &&
+        IsDescendantOf(node, this)) {
+      mScopeStart = node;
+      return;
+    }
+  }
+}
+
 const nsString*
 nsQuoteNode::Text()
 {
   NS_ASSERTION(mType == eStyleContentType_OpenQuote ||
                mType == eStyleContentType_CloseQuote,
                "should only be called when mText should be non-null");
   const nsStyleQuotes* styleQuotes = mPseudoFrame->StyleQuotes();
   int32_t quotesCount = styleQuotes->QuotesCount(); // 0 if 'quotes:none'
@@ -58,18 +90,25 @@ nsQuoteNode::Text()
                : styleQuotes->CloseQuoteAt(quoteDepth);
   }
   return result;
 }
 
 void
 nsQuoteList::Calc(nsQuoteNode* aNode)
 {
-  if (aNode == FirstNode()) {
+  aNode->UpdateScope(Prev(aNode));
+  if (aNode == FirstNode() || aNode->mScopeStart == Prev(aNode)) {
     aNode->mDepthBefore = 0;
+  } else if (Prev(aNode) && aNode->mScopeStart != Prev(aNode)->mScopeStart) {
+    nsQuoteNode *prev = Prev(aNode)->mScopeStart;
+    while (prev->mScopeStart != aNode->mScopeStart) {
+      prev = prev->mScopeStart;
+    }
+    aNode->mDepthBefore = prev->mDepthBefore;
   } else {
     aNode->mDepthBefore = Prev(aNode)->DepthAfter();
   }
 }
 
 void
 nsQuoteList::RecalcAll()
 {
@@ -108,22 +147,26 @@ nsQuoteList::PrintChain()
           printf("noOpen");
           break;
         case (eStyleContentType_CloseQuote):
           printf("close");
           break;
         case (eStyleContentType_NoCloseQuote):
           printf("noClose");
           break;
+        case (eStyleContentType_ScopeStart):
+          printf("scopeStart");
+          break;
         default:
           printf("unknown!!!");
     }
     printf(" %d - %d,", node->Depth(), node->DepthAfter());
     if (node->mText) {
       nsAutoString data;
       node->mText->GetData(data);
       printf(" \"%s\",", NS_ConvertUTF16toUTF8(data).get());
     }
+    printf(" ^%p", static_cast<void*>(node->mScopeStart));
     printf("\n");
     node = Next(node);
   } while (node != FirstNode());
 }
 #endif
diff --git a/layout/base/nsQuoteList.h b/layout/base/nsQuoteList.h
--- a/layout/base/nsQuoteList.h
+++ b/layout/base/nsQuoteList.h
@@ -13,27 +13,31 @@
 
 struct nsQuoteNode : public nsGenConNode {
   // open-quote, close-quote, no-open-quote, or no-close-quote
   const nsStyleContentType mType;
 
   // Quote depth before this quote, which is always non-negative.
   int32_t mDepthBefore;
 
-  nsQuoteNode(nsStyleContentType& aType, uint32_t aContentIndex)
+  // Quote "scope" start, used to implement containment.
+  nsQuoteNode *mScopeStart;
+
+  nsQuoteNode(nsStyleContentType aType, int32_t aContentIndex)
     : nsGenConNode(aContentIndex)
     , mType(aType)
     , mDepthBefore(0)
+    , mScopeStart(nullptr)
   {
     NS_ASSERTION(aType == eStyleContentType_OpenQuote ||
                  aType == eStyleContentType_CloseQuote ||
                  aType == eStyleContentType_NoOpenQuote ||
-                 aType == eStyleContentType_NoCloseQuote,
+                 aType == eStyleContentType_NoCloseQuote ||
+                 aType == eStyleContentType_ScopeStart,
                  "incorrect type");
-    NS_ASSERTION(aContentIndex <= INT32_MAX, "out of range");
   }
 
   virtual bool InitTextFrame(nsGenConList* aList, 
           nsIFrame* aPseudoFrame, nsIFrame* aTextFrame) override;
 
   // is this 'open-quote' or 'no-open-quote'?
   bool IsOpenQuote() {
     return mType == eStyleContentType_OpenQuote ||
@@ -55,20 +59,25 @@ struct nsQuoteNode : public nsGenConNode
   // -1 means this is a closing quote that tried to decrement the
   // counter below zero (which means no quote should be rendered).
   int32_t Depth() {
     return IsOpenQuote() ? mDepthBefore : mDepthBefore - 1;
   }
 
   // always non-negative
   int32_t DepthAfter() {
+    if (mType == eStyleContentType_ScopeStart) {
+      return mDepthBefore;
+    }
     return IsOpenQuote() ? mDepthBefore + 1
                          : (mDepthBefore == 0 ? 0 : mDepthBefore - 1);
   }
 
+  void UpdateScope(nsQuoteNode *aPrevNode);
+
   // The text that should be displayed for this quote.
   const nsString* Text();
 };
 
 class nsQuoteList : public nsGenConList {
 private:
   nsQuoteNode* FirstNode() { return static_cast<nsQuoteNode*>(mFirstNode); }
 public:
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -2382,16 +2382,18 @@ enum nsStyleContentType {
   eStyleContentType_Attr          = 20,
   eStyleContentType_Counter       = 30,
   eStyleContentType_Counters      = 31,
   eStyleContentType_OpenQuote     = 40,
   eStyleContentType_CloseQuote    = 41,
   eStyleContentType_NoOpenQuote   = 42,
   eStyleContentType_NoCloseQuote  = 43,
   eStyleContentType_AltContent    = 50,
+  // Not actually content:
+  eStyleContentType_ScopeStart,
   eStyleContentType_Uninitialized
 };
 
 struct nsStyleContentData {
   nsStyleContentType  mType;
   union {
     char16_t *mString;
     imgRequestProxy *mImage;
