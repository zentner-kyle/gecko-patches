# HG changeset patch
# User Kyle Zentner <kzentner@mozilla.com>
# Parent  ec1c73c37c22c3a34f7b1d55a772008a74027bd2

diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -916,16 +916,47 @@ protected:
 
   // Our list of all pending bindings.  When we're done, we need to call
   // AddToAttachedQueue on all of them, in order.
   LinkedList<PendingBinding> mPendingBindings;
 
   PendingBinding* mCurrentPendingBindingInsertionPoint;
 };
 
+/**
+ * Set the provided style root location to the provided frame if it's style
+ * containing.
+ * If we should be in a style root, but aren't, scan up the frame tree to find
+ * the correct style root.
+ * Automatically restore the style root when destroyed.
+ */
+class AutoRestoreStyleRoot {
+  private:
+    nsIFrame*& mLocation;
+    nsIFrame*  mLastRoot;
+
+  public:
+    AutoRestoreStyleRoot(nsIFrame*& aLocation, nsIFrame* aPotentialRoot)
+      : mLocation(aLocation)
+      , mLastRoot(aLocation)
+    {
+      if (aPotentialRoot) {
+        if (aPotentialRoot->StyleDisplay()->IsContainStyle()) {
+          mLocation = aPotentialRoot;
+        } else if (aPotentialRoot->StyleContext()->HasContainStyle() &&
+                  !aLocation) {
+          mLocation = nsCSSFrameConstructor::FindStyleRoot(aPotentialRoot);
+        }
+      }
+    }
+    ~AutoRestoreStyleRoot() {
+      mLocation = mLastRoot;
+    }
+};
+
 nsFrameConstructorState::nsFrameConstructorState(nsIPresShell*          aPresShell,
                                                  nsContainerFrame*      aFixedContainingBlock,
                                                  nsContainerFrame*      aAbsoluteContainingBlock,
                                                  nsContainerFrame*      aFloatContainingBlock,
                                                  nsILayoutHistoryState* aHistoryState)
   : mPresContext(aPresShell->GetPresContext()),
     mPresShell(aPresShell),
     mFrameManager(aPresShell->FrameManager()),
@@ -1442,16 +1473,17 @@ nsCSSFrameConstructor::nsCSSFrameConstru
                                              nsStyleSet* aStyleSet)
   : nsFrameManager(aPresShell, aStyleSet)
   , mDocument(aDocument)
   , mRootElementFrame(nullptr)
   , mRootElementStyleFrame(nullptr)
   , mDocElementContainingBlock(nullptr)
   , mGfxScrollFrame(nullptr)
   , mPageSequenceFrame(nullptr)
+  , mStyleRoot(nullptr)
   , mCurrentDepth(0)
   , mUpdateCount(0)
   , mQuotesDirty(false)
   , mCountersDirty(false)
   , mIsDestroyingFrameTree(false)
   , mHasRootAbsPosContainingBlock(false)
   , mAlwaysCreateFramesForIgnorableWhitespace(false)
 {
@@ -4766,23 +4798,22 @@ nsCSSFrameConstructor::InitAndRestoreFra
   aNewFrame->Init(aContent, aParentFrame, nullptr);
   aNewFrame->AddStateBits(aState.mAdditionalStateBits);
 
   if (aState.mFrameState) {
     // Restore frame state for just the newly created frame.
     RestoreFrameStateFor(aNewFrame, aState.mFrameState);
   }
 
-  MaybePushStyleRoot(aNewFrame);
+  AutoRestoreStyleRoot savedStyleRoot(mStyleRoot, aNewFrame);
   if (aAllowCounters &&
       mCounterManager.AddCounterResetsAndIncrements(GetStyleRoot(),
         aNewFrame)) {
     CountersDirty();
   }
-  MaybePopStyleRoot(aNewFrame);
 }
 
 already_AddRefed<nsStyleContext>
 nsCSSFrameConstructor::ResolveStyleContext(nsIFrame*         aParentFrame,
                                            nsIContent*       aContainer,
                                            nsIContent*       aChild,
                                            nsFrameConstructorState* aState)
 {
@@ -6868,17 +6899,17 @@ void
 nsCSSFrameConstructor::CreateNeededFrames(nsIContent* aContent)
 {
   NS_ASSERTION(!aContent->HasFlag(NODE_NEEDS_FRAME),
     "shouldn't get here with a content node that has needs frame bit set");
   NS_ASSERTION(aContent->HasFlag(NODE_DESCENDANTS_NEED_FRAMES),
     "should only get here with a content node that has descendants needing frames");
 
   aContent->UnsetFlags(NODE_DESCENDANTS_NEED_FRAMES);
-  MaybePushStyleRoot(aContent->GetPrimaryFrame());
+  AutoRestoreStyleRoot savedStyleRoot(mStyleRoot, aContent->GetPrimaryFrame());
 
   // We could either descend first (on nodes that don't have NODE_NEEDS_FRAME
   // set) or issue content notifications for our kids first. In absence of
   // anything definitive either way we'll go with the latter.
 
   // It might be better to use GetChildArray and scan it completely first and
   // then issue all notifications. (We have to scan it completely first because
   // constructing frames can set attributes, which can change the storage of
@@ -6918,33 +6949,31 @@ nsCSSFrameConstructor::CreateNeededFrame
   // Now descend.
   FlattenedChildIterator iter(aContent);
   for (nsIContent* child = iter.GetNextChild(); child; child = iter.GetNextChild()) {
     if (child->HasFlag(NODE_DESCENDANTS_NEED_FRAMES)) {
       CreateNeededFrames(child);
     }
   }
 
-  MaybePopStyleRoot(aContent->GetPrimaryFrame());
 }
 
 void nsCSSFrameConstructor::CreateNeededFrames()
 {
   NS_ASSERTION(!nsContentUtils::IsSafeToRunScript(),
                "Someone forgot a script blocker");
 
   Element* rootElement = mDocument->GetRootElement();
   NS_ASSERTION(!rootElement || !rootElement->HasFlag(NODE_NEEDS_FRAME),
     "root element should not have frame created lazily");
   if (rootElement && rootElement->HasFlag(NODE_DESCENDANTS_NEED_FRAMES)) {
-    MaybePushStyleRoot(rootElement->GetPrimaryFrame());
+    AutoRestoreStyleRoot savedStyleRoot(mStyleRoot, rootElement->GetPrimaryFrame());
     BeginUpdate();
     CreateNeededFrames(rootElement);
     EndUpdate();
-    MaybePopStyleRoot(rootElement->GetPrimaryFrame());
   }
 }
 
 void
 nsCSSFrameConstructor::IssueSingleInsertNofications(nsIContent* aContainer,
                                                     nsIContent* aStartChild,
                                                     nsIContent* aEndChild,
                                                     bool aAllowLazyConstruction)
@@ -8348,21 +8377,20 @@ nsCSSFrameConstructor::EnsureFrameForTex
   if (aContent->HasFlag(NS_CREATE_FRAME_IF_NON_WHITESPACE) &&
       !mAlwaysCreateFramesForIgnorableWhitespace) {
     // Text frame may have been suppressed. Disable suppression and signal
     // that a flush should be performed. We do this on a document-wide
     // basis so that pages that repeatedly query metrics for
     // collapsed-whitespace text nodes don't trigger pathological behavior.
     mAlwaysCreateFramesForIgnorableWhitespace = true;
     nsAutoScriptBlocker blocker;
-    MaybePushStyleRoot(aContent->GetPrimaryFrame());
+    AutoRestoreStyleRoot savedStyleRoot(mStyleRoot, aContent->GetPrimaryFrame());
     BeginUpdate();
     ReconstructDocElementHierarchy();
     EndUpdate();
-    MaybePopStyleRoot(aContent->GetPrimaryFrame());
   }
   return aContent->GetPrimaryFrame();
 }
 
 nsresult
 nsCSSFrameConstructor::CharacterDataChanged(nsIContent* aContent,
                                             CharacterDataChangeInfo* aInfo)
 {
@@ -8462,25 +8490,25 @@ nsCSSFrameConstructor::EndUpdate()
   }
   NS_ASSERTION(mUpdateCount, "Negative mUpdateCount!");
   --mUpdateCount;
 }
 
 void
 nsCSSFrameConstructor::RecalcQuotesAndCounters()
 {
-  // XXX kzentner: Is the style root always correct here?
   nsIFrame* styleRoot = GetStyleRoot();
   if (mQuotesDirty) {
     mQuotesDirty = false;
     mQuotesManager.RecalcDirty(styleRoot);
   }
 
   if (mCountersDirty) {
     mCountersDirty = false;
+    // XXX kzentner: Is the style root always correct here?
     mCounterManager.RecalcDirty(styleRoot);
   }
 
   NS_ASSERTION(!mQuotesDirty, "Quotes updates will be lost");
   NS_ASSERTION(!mCountersDirty, "Counter updates will be lost");
 }
 
 void
@@ -10358,17 +10386,17 @@ nsCSSFrameConstructor::ProcessChildren(n
                   "content insertion frame");
   const uint32_t kMaxDepth = 2 * MAX_REFLOW_DEPTH;
   static_assert(kMaxDepth <= UINT16_MAX, "mCurrentDepth type is too narrow");
   AutoRestore<uint16_t> savedDepth(mCurrentDepth);
   if (mCurrentDepth != UINT16_MAX) {
     ++mCurrentDepth;
   }
 
-  MaybePushStyleRoot(aFrame);
+  AutoRestoreStyleRoot savedStyleRoot(mStyleRoot, aFrame);
 
   if (!aPossiblyLeafFrame) {
     aPossiblyLeafFrame = aFrame;
   }
 
   // XXXbz ideally, this would do all the pushing of various
   // containing blocks as needed, so callers don't have to do it...
 
@@ -10544,17 +10572,16 @@ nsCSSFrameConstructor::ProcessChildren(n
     blockFrame->SetInitialChildList(kPrincipalList, aFrameItems);
     NS_ASSERTION(aFrameItems.IsEmpty(), "How did that happen?");
     aFrameItems.Clear();
     aFrameItems.AddChild(blockFrame);
 
     aFrame->AddStateBits(NS_STATE_BOX_WRAPS_KIDS_IN_BLOCK);
   }
 
-  MaybePopStyleRoot(aFrame);
 }
 
 //----------------------------------------------------------------------
 
 // Support for :first-line style
 
 // Special routine to handle placing a list of frames into a block
 // frame that has first-line style. The routine ensures that the first
@@ -11392,17 +11419,17 @@ nsCSSFrameConstructor::CreateListBoxCont
     // any frame at all
     const nsStyleDisplay* display = styleContext->StyleDisplay();
 
     if (NS_STYLE_DISPLAY_NONE == display->mDisplay) {
       *aNewFrame = nullptr;
       return NS_OK;
     }
 
-    MaybePushStyleRoot(aParentFrame);
+    AutoRestoreStyleRoot savedStyleRoot(mStyleRoot, aParentFrame);
     BeginUpdate();
 
     FrameConstructionItemList items;
     AddFrameConstructionItemsInternal(state, aChild, aParentFrame,
                                       aChild->NodeInfo()->NameAtom(),
                                       aChild->GetNameSpaceID(),
                                       true, styleContext,
                                       ITEM_ALLOW_XBL_BASE, nullptr, items);
@@ -11415,17 +11442,16 @@ nsCSSFrameConstructor::CreateListBoxCont
       // Notify the parent frame
       if (aIsAppend)
         rv = ((nsListBoxBodyFrame*)aParentFrame)->ListBoxAppendFrames(frameItems);
       else
         rv = ((nsListBoxBodyFrame*)aParentFrame)->ListBoxInsertFrames(aPrevFrame, frameItems);
     }
 
     EndUpdate();
-    MaybePopStyleRoot(aParentFrame);
 
 #ifdef ACCESSIBILITY
     if (newFrame) {
       nsAccessibilityService* accService = nsIPresShell::AccService();
       if (accService) {
         accService->ContentRangeInserted(mPresShell, aChild->GetParent(),
                                          aChild, aChild->GetNextSibling());
       }
@@ -12260,32 +12286,31 @@ nsCSSFrameConstructor::ReframeContaining
                                   true, aFlags, nullptr);
 }
 
 nsresult
 nsCSSFrameConstructor::GenerateChildFrames(nsContainerFrame* aFrame)
 {
   {
     nsAutoScriptBlocker scriptBlocker;
-    MaybePushStyleRoot(aFrame);
+    AutoRestoreStyleRoot savedStyleRoot(mStyleRoot, aFrame);
     BeginUpdate();
 
     nsFrameItems childItems;
     nsFrameConstructorState state(mPresShell, nullptr, nullptr, nullptr);
     // We don't have a parent frame with a pending binding constructor here,
     // so no need to worry about ordering of the kids' constructors with it.
     // Pass null for the PendingBinding.
     ProcessChildren(state, aFrame->GetContent(), aFrame->StyleContext(),
                     aFrame, false, childItems, false,
                     nullptr);
 
     aFrame->SetInitialChildList(kPrincipalList, childItems);
 
     EndUpdate();
-    MaybePopStyleRoot(aFrame);
   }
 
 #ifdef ACCESSIBILITY
   nsAccessibilityService* accService = nsIPresShell::AccService();
   if (accService) {
     nsIContent* container = aFrame->GetContent();
     nsIContent* child = container->GetFirstChild();
     if (child) {
diff --git a/layout/base/nsCSSFrameConstructor.h b/layout/base/nsCSSFrameConstructor.h
--- a/layout/base/nsCSSFrameConstructor.h
+++ b/layout/base/nsCSSFrameConstructor.h
@@ -2015,54 +2015,31 @@ private:
   // see if aContent and aSibling are legitimate siblings due to restrictions
   // imposed by table columns
   // XXXbz this code is generally wrong, since the frame for aContent
   // may be constructed based on tag, not based on aDisplay!
   bool IsValidSibling(nsIFrame*              aSibling,
                         nsIContent*            aContent,
                         uint8_t&               aDisplay);
 
+  nsIFrame* GetStyleRoot() {
+    return mStyleRoot;
+  }
+
+public:
+  static
   nsIFrame* FindStyleRoot(nsIFrame* aDescendant) {
     nsIFrame* ancestor = aDescendant;
     while (ancestor && !ancestor->StyleDisplay()->IsContainStyle()) {
       ancestor = ancestor->GetParent();
     }
     return ancestor;
   }
 
-  nsIFrame* GetStyleRoot() {
-    if (!mStyleRoots.Length()) {
-      return nullptr;
-    }
-    return mStyleRoots.LastElement();
-  }
-
-  void MaybePushStyleRoot(nsIFrame* aPotentialRoot) {
-    if (aPotentialRoot) {
-      if (aPotentialRoot->StyleDisplay()->IsContainStyle()) {
-        mStyleRoots.AppendElement(aPotentialRoot);
-      } else if (aPotentialRoot->StyleContext()->HasContainStyle() &&
-                !mStyleRoots.Length()) {
-        mStyleRoots.AppendElement(FindStyleRoot(aPotentialRoot));
-      }
-    }
-  }
-
-  void MaybePopStyleRoot(nsIFrame* aPotentialRoot) {
-    if (aPotentialRoot && GetStyleRoot() == aPotentialRoot) {
-      mStyleRoots.RemoveElementAt(mStyleRoots.Length() - 1);
-      NS_ASSERTION(aPotentialRoot->StyleDisplay()->IsContainStyle(),
-                   "Style root should have been style containing");
-    }
-    if (!mUpdateCount) {
-      NS_ASSERTION(!mStyleRoots.Length(),
-                   "Should have no more style roots when done updating");
-    }
-  }
-
+private:
   void QuotesDirty() {
     NS_PRECONDITION(mUpdateCount != 0, "Instant quote updates are bad news");
     mQuotesDirty = true;
     mDocument->SetNeedLayoutFlush();
   }
 
   void CountersDirty() {
     NS_PRECONDITION(mUpdateCount != 0, "Instant counter updates are bad news");
@@ -2105,17 +2082,17 @@ private:
   nsIFrame*           mRootElementStyleFrame;
   // This is the containing block that contains the root element ---
   // the real "initial containing block" according to CSS 2.1.
   nsContainerFrame*   mDocElementContainingBlock;
   nsIFrame*           mGfxScrollFrame;
   nsIFrame*           mPageSequenceFrame;
   nsQuotesManager     mQuotesManager;
   nsCounterManager    mCounterManager;
-  nsTArray<nsIFrame*> mStyleRoots;
+  nsIFrame*           mStyleRoot;
   // Current ProcessChildren depth.
   uint16_t            mCurrentDepth;
   uint16_t            mUpdateCount;
   bool                mQuotesDirty : 1;
   bool                mCountersDirty : 1;
   bool                mIsDestroyingFrameTree : 1;
   // This is true if mDocElementContainingBlock supports absolute positioning
   bool                mHasRootAbsPosContainingBlock : 1;
