# HG changeset patch
# User Kyle Zentner <kzentner@mozilla.com>
# Parent  de12d098df2b2d3f8294b4833efd016786eb61c1
Bug 1172087 - Patch 2: Implement break-* for CSS 'contain: style'.

diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -5648,17 +5648,18 @@ nsCSSFrameConstructor::AddFrameConstruct
     return;
   }
 
   bool canHavePageBreak =
     (aFlags & ITEM_ALLOW_PAGE_BREAK) &&
     aState.mPresContext->IsPaginated() &&
     !display->IsAbsolutelyPositionedStyle() &&
     !(bits & FCDATA_IS_TABLE_PART) &&
-    !(bits & FCDATA_IS_SVG_TEXT);
+    !(bits & FCDATA_IS_SVG_TEXT) &&
+    !styleContext->HasContainStyle();
 
   if (canHavePageBreak && display->mBreakBefore) {
     AddPageBreakItem(aContent, aStyleContext, aItems);
   }
 
   if (MOZ_UNLIKELY(bits & FCDATA_IS_CONTENTS)) {
     if (!GetDisplayContentsStyleFor(aContent)) {
       MOZ_ASSERT(styleContext->GetPseudo() || !isGeneratedContent,
diff --git a/layout/generic/nsFlexContainerFrame.cpp b/layout/generic/nsFlexContainerFrame.cpp
--- a/layout/generic/nsFlexContainerFrame.cpp
+++ b/layout/generic/nsFlexContainerFrame.cpp
@@ -3152,17 +3152,18 @@ nsFlexContainerFrame::GenerateFlexLines(
 
   // Overall index of the current flex item in the flex container. (This gets
   // checked against entries in aStruts.)
   uint32_t itemIdxInContainer = 0;
 
   for (nsIFrame* childFrame : mFrames) {
     // Honor "page-break-before", if we're multi-line and this line isn't empty:
     if (!isSingleLine && !curLine->IsEmpty() &&
-        childFrame->StyleDisplay()->mBreakBefore) {
+        childFrame->StyleDisplay()->mBreakBefore &&
+        !childFrame->StyleContext()->HasContainStyle()) {
       curLine = AddNewFlexLineToList(aLines, shouldInsertAtFront);
     }
 
     nsAutoPtr<FlexItem> item;
     if (nextStrutIdx < aStruts.Length() &&
         aStruts[nextStrutIdx].mItemIdx == itemIdxInContainer) {
 
       // Use the simplified "strut" FlexItem constructor:
@@ -3191,17 +3192,18 @@ nsFlexContainerFrame::GenerateFlexLines(
     // Add item to current flex line (and update the line's bookkeeping about
     // how large its items collectively are).
     curLine->AddItem(item.forget(), shouldInsertAtFront,
                      itemInnerHypotheticalMainSize,
                      itemOuterHypotheticalMainSize);
 
     // Honor "page-break-after", if we're multi-line and have more children:
     if (!isSingleLine && childFrame->GetNextSibling() &&
-        childFrame->StyleDisplay()->mBreakAfter) {
+        childFrame->StyleDisplay()->mBreakAfter &&
+        !childFrame->StyleContext()->HasContainStyle()) {
       curLine = AddNewFlexLineToList(aLines, shouldInsertAtFront);
     }
     itemIdxInContainer++;
   }
 }
 
 // Retrieves the content-box main-size of our flex container from the
 // reflow state (specifically, the main-size of *this continuation* of the
diff --git a/layout/tables/nsTableFrame.cpp b/layout/tables/nsTableFrame.cpp
--- a/layout/tables/nsTableFrame.cpp
+++ b/layout/tables/nsTableFrame.cpp
@@ -220,26 +220,29 @@ IsRepeatedFrame(nsIFrame* kidFrame)
 
 bool
 nsTableFrame::PageBreakAfter(nsIFrame* aSourceFrame,
                              nsIFrame* aNextFrame)
 {
   const nsStyleDisplay* display = aSourceFrame->StyleDisplay();
   nsTableRowGroupFrame* prevRg = do_QueryFrame(aSourceFrame);
   // don't allow a page break after a repeated element ...
-  if ((display->mBreakAfter || (prevRg && prevRg->HasInternalBreakAfter())) &&
+  if (((display->mBreakAfter &&
+        !aSourceFrame->StyleContext()->HasContainStyle()) || 
+       (prevRg && prevRg->HasInternalBreakAfter())) &&
       !IsRepeatedFrame(aSourceFrame)) {
     return !(aNextFrame && IsRepeatedFrame(aNextFrame)); // or before
   }
 
   if (aNextFrame) {
     display = aNextFrame->StyleDisplay();
     // don't allow a page break before a repeated element ...
      nsTableRowGroupFrame* nextRg = do_QueryFrame(aNextFrame);
-    if ((display->mBreakBefore ||
+    if (((display->mBreakBefore &&
+          !aNextFrame->StyleContext()->HasContainStyle()) ||
         (nextRg && nextRg->HasInternalBreakBefore())) &&
         !IsRepeatedFrame(aNextFrame)) {
       return !IsRepeatedFrame(aSourceFrame); // or after
     }
   }
   return false;
 }
 
diff --git a/layout/tables/nsTableRowGroupFrame.cpp b/layout/tables/nsTableRowGroupFrame.cpp
--- a/layout/tables/nsTableRowGroupFrame.cpp
+++ b/layout/tables/nsTableRowGroupFrame.cpp
@@ -1603,27 +1603,29 @@ nsTableRowGroupFrame::GetType() const
 
 /** find page break before the first row **/
 bool
 nsTableRowGroupFrame::HasInternalBreakBefore() const
 {
  nsIFrame* firstChild = mFrames.FirstChild();
   if (!firstChild)
     return false;
-  return firstChild->StyleDisplay()->mBreakBefore;
+  return firstChild->StyleDisplay()->mBreakBefore &&
+         !StyleContext()->HasContainStyle();
 }
 
 /** find page break after the last row **/
 bool
 nsTableRowGroupFrame::HasInternalBreakAfter() const
 {
   nsIFrame* lastChild = mFrames.LastChild();
   if (!lastChild)
     return false;
-  return lastChild->StyleDisplay()->mBreakAfter;
+  return lastChild->StyleDisplay()->mBreakAfter &&
+         !StyleContext()->HasContainStyle();
 }
 /* ----- global methods ----- */
 
 nsTableRowGroupFrame*
 NS_NewTableRowGroupFrame(nsIPresShell* aPresShell, nsStyleContext* aContext)
 {
   return new (aPresShell) nsTableRowGroupFrame(aContext);
 }
