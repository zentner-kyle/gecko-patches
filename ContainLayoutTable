# HG changeset patch
# User Kyle Zentner <kzentner@mozilla.com>
# Parent  d3a12cd455c1ecb5d1a67af7ce08f121dec89315
Bug 1178895 - Patch 4: Implement 'contain: layout' for table elements.

diff --git a/layout/reftests/w3c-css/submitted/contain/contain-layout-table-001.html b/layout/reftests/w3c-css/submitted/contain/contain-layout-table-001.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/w3c-css/submitted/contain/contain-layout-table-001.html
@@ -0,0 +1,227 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+  <meta charset="utf-8">
+  <title>CSS Test: 'contain: layout' on block element containing
+    floats should cause the element to have zero height.</title>
+  <link rel="author" title="Kyle Zentner" href="mailto:kzentner@mozilla.com">
+  <link rel="help" href="http://www.w3.org/TR/css-containment-1/#containment-layout">
+  <link rel="match" href="contain-layout-block-003-ref.html">
+  <style>
+  body {
+    margin: 0;
+  }
+  .container {
+    contain: layout;
+    border: 1em solid black;
+    background: cyan;
+  }
+  .right-float {
+    float: right;
+    background: blue;
+    width: 20px;
+    height: 20px;
+    margin: 20px;
+  }
+  .left-float {
+    float: left;
+    background: orange;
+    width: 20px;
+    height: 20px;
+    margin: 20px;
+  }
+  table {
+    margin: 100px;
+    border: solid black 3px;
+    background: blue;
+    padding: 3px;
+  }
+  td {
+    margin: 5px;
+    border: solid black 10px;
+    padding: 3px;
+  }
+  tbody {
+    padding: 3px;
+    background: pink;
+  }
+  tr {
+    padding: 5px;
+    background: orange;
+  }
+  thead td {
+    background: pink;
+  }
+  tbody td {
+    background: green;
+  }
+  tfoot td {
+    background: purple;
+  }
+  .big-block {
+    width: 100px;
+    height: 100px;
+    background: salmon;
+  }
+  .block {
+    display: inline-block;
+    width: 50px;
+    height: 50px;
+    background: teal;
+  }
+  td {
+    //border: 1em solid black;
+  }
+  table {
+    table-layout: fixed;
+  }
+  </style>
+</head>
+<body class="reftest-paint">
+  <table>
+    <thead>
+      <tr>
+        <td>
+          Table begin.
+          <div class="right-float"></div>
+          Table table.
+          <div class="left-float"></div>
+          Table end.
+          <div class="block"></div>
+        </td>
+        <td>
+          Table begin.
+          <div class="right-float"></div>
+          Table table.
+          <div class="left-float"></div>
+          Table end.
+          <div class="block"></div>
+        </td>
+      </tr>
+      <tr>
+        <td>Table begin. Things thing sthings things things. Words words words words. Words words words words words words.
+          <div class="right-float"></div>
+          Table table.
+          <div class="left-float"></div>
+          Table end.
+          <div class="block"></div>
+          <div class="block"></div>
+          <div class="block"></div>
+          <div class="block"></div>
+          <div class="block"></div>
+          <div class="block"></div>
+          <div class="block"></div>
+          <div class="block"></div>
+          <div class="block"></div>
+          <div class="block"></div>
+          <div class="block"></div>
+          <div class="block"></div>
+        </td>
+        <td>
+          Table begin.
+          <div class="right-float"></div>
+          Table table.
+          <div class="left-float"></div>
+          Table end.
+          <div class="block"></div>
+        </td>
+      </tr>
+      <tr>
+        <td>
+          Table begin.
+          <div class="right-float"></div>
+          Table table.
+          <div class="left-float"></div>
+          Table end.
+          <div class="block"></div>
+        </td>
+        <td>
+          Table begin.
+          <div class="right-float"></div>
+          Table table.
+          <div class="left-float"></div>
+          Table end.
+          <div class="big-block"></div>
+          <div class="block"></div>
+        </td>
+      </tr>
+    </thead>
+    <tbody>
+      <tr>
+        <td>
+          Table begin.
+          <div class="right-float"></div>
+          Table table.
+          <div class="left-float"></div>
+          Table end.
+          <div class="block"></div>
+        </td>
+        <td>
+          Table begin.
+          <div class="right-float"></div>
+          Table table.
+          <div class="left-float"></div>
+          Table end.
+          <div class="block"></div>
+        </td>
+      </tr>
+      <tr>
+        <td>
+          Table begin.
+          <div class="right-float"></div>
+          Table table.
+          <div class="left-float"></div>
+          Table end.
+          <div class="block"></div>
+        </td>
+        <td>
+          Table begin.
+          <div class="right-float"></div>
+          Table table.
+          <div class="left-float"></div>
+          Table end.
+          <div class="block"></div>
+        </td>
+      </tr>
+    </tbody>
+    <tfoot>
+      <tr>
+        <td>
+          Table begin.
+          <div class="right-float"></div>
+          Table table.
+          <div class="left-float"></div>
+          Table end.
+          <div class="block"></div>
+        </td>
+        <td>
+          Table begin.
+          <div class="right-float"></div>
+          Table table.
+          <div class="left-float"></div>
+          Table end.
+          <div class="block"></div>
+        </td>
+      </tr>
+      <tr>
+        <td>
+          Table begin.
+          <div class="right-float"></div>
+          Table table.
+          <div class="left-float"></div>
+          Table end.
+          <div class="block"></div>
+        </td>
+        <td>
+          Table begin.
+          <div class="right-float"></div>
+          Table table.
+          <div class="left-float"></div>
+          Table end.
+          <div class="block"></div>
+        </td>
+      </tr>
+    </tfoot>
+  </table>
+</body>
+</html>
diff --git a/layout/tables/BasicTableLayoutStrategy.cpp b/layout/tables/BasicTableLayoutStrategy.cpp
--- a/layout/tables/BasicTableLayoutStrategy.cpp
+++ b/layout/tables/BasicTableLayoutStrategy.cpp
@@ -446,16 +446,19 @@ BasicTableLayoutStrategy::ComputeIntrins
     nsTableCellMap *cellMap = mTableFrame->GetCellMap();
     nscoord min = 0, pref = 0, max_small_pct_pref = 0, nonpct_pref_total = 0;
     float pct_total = 0.0f; // always from 0.0f - 1.0f
     int32_t colCount = cellMap->GetColCount();
     // add a total of (colcount + 1) lots of cellSpacingX for columns where a
     // cell originates
     nscoord add = mTableFrame->GetColSpacing(colCount);
 
+    if (nsLayoutUtils::IsContainLayout(mTableFrame)) {
+        colCount = 0;
+    }
     for (int32_t col = 0; col < colCount; ++col) {
         nsTableColFrame *colFrame = mTableFrame->GetColFrame(col);
         if (!colFrame) {
             NS_ERROR("column frames out of sync with cell map");
             continue;
         }
         if (mTableFrame->ColumnHasCellSpacingBefore(col)) {
             add += mTableFrame->GetColSpacing(col - 1);
diff --git a/layout/tables/nsTableCellFrame.cpp b/layout/tables/nsTableCellFrame.cpp
--- a/layout/tables/nsTableCellFrame.cpp
+++ b/layout/tables/nsTableCellFrame.cpp
@@ -770,28 +770,36 @@ int32_t nsTableCellFrame::GetColSpan()
 }
 
 /* virtual */ nscoord
 nsTableCellFrame::GetMinISize(nsRenderingContext *aRenderingContext)
 {
   nscoord result = 0;
   DISPLAY_MIN_WIDTH(this, result);
 
+  if (nsLayoutUtils::IsContainLayout(this)) {
+    return result;
+  }
+
   nsIFrame *inner = mFrames.FirstChild();
   result = nsLayoutUtils::IntrinsicForContainer(aRenderingContext, inner,
                                                     nsLayoutUtils::MIN_ISIZE);
   return result;
 }
 
 /* virtual */ nscoord
 nsTableCellFrame::GetPrefISize(nsRenderingContext *aRenderingContext)
 {
   nscoord result = 0;
   DISPLAY_PREF_WIDTH(this, result);
 
+  if (nsLayoutUtils::IsContainLayout(this)) {
+    return result;
+  }
+
   nsIFrame *inner = mFrames.FirstChild();
   result = nsLayoutUtils::IntrinsicForContainer(aRenderingContext, inner,
                                                 nsLayoutUtils::PREF_ISIZE);
   return result;
 }
 
 /* virtual */ nsIFrame::IntrinsicISizeOffsetData
 nsTableCellFrame::IntrinsicISizeOffsets()
@@ -988,25 +996,25 @@ nsTableCellFrame::Reflow(nsPresContext* 
                     wm, kidOrigin, containerSize, 0);
 
   nsTableFrame::InvalidateTableFrame(firstKid, origRect, origVisualOverflow,
                                      firstReflow);
 
   // first, compute the bsize which can be set w/o being restricted by
   // available bsize
   LogicalSize cellSize(wm);
-  cellSize.BSize(wm) = kidSize.BSize(wm);
+  if (!nsLayoutUtils::IsContainLayout(this)) {
+    cellSize.BSize(wm) = kidSize.BSize(wm);
+    cellSize.ISize(wm) = kidSize.ISize(wm);
+  }
 
   if (NS_UNCONSTRAINEDSIZE != cellSize.BSize(wm)) {
     cellSize.BSize(wm) += borderPadding.BStartEnd(wm);
   }
 
-  // next determine the cell's isize
-  cellSize.ISize(wm) = kidSize.ISize(wm);      // at this point, we've factored in the cell's style attributes
-
   // factor in border and padding
   if (NS_UNCONSTRAINEDSIZE != cellSize.ISize(wm)) {
     cellSize.ISize(wm) += borderPadding.IStartEnd(wm);
   }
 
   // set the cell's desired size and max element size
   aDesiredSize.SetSize(wm, cellSize);
 
diff --git a/layout/tables/nsTableFrame.cpp b/layout/tables/nsTableFrame.cpp
--- a/layout/tables/nsTableFrame.cpp
+++ b/layout/tables/nsTableFrame.cpp
@@ -3295,17 +3295,17 @@ nsTableFrame::CalcDesiredBSize(const nsH
     aDesiredSize.BSize(wm) = 0;
     return;
   }
   LogicalMargin borderPadding = GetChildAreaOffset(wm, &aReflowState);
 
   // get the natural bsize based on the last child's (row group) rect
   RowGroupArray rowGroups;
   OrderRowGroups(rowGroups);
-  if (rowGroups.IsEmpty()) {
+  if (nsLayoutUtils::IsContainLayout(this) || rowGroups.IsEmpty()) {
     // tables can be used as rectangular items without content
     nscoord tableSpecifiedBSize = CalcBorderBoxBSize(aReflowState);
     if ((NS_UNCONSTRAINEDSIZE != tableSpecifiedBSize) &&
         (tableSpecifiedBSize > 0) &&
         eCompatibility_NavQuirks != PresContext()->CompatibilityMode()) {
           // empty tables should not have a size in quirks mode
       aDesiredSize.BSize(wm) = tableSpecifiedBSize;
     } else {
