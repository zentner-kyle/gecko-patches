# HG changeset patch
# User Kyle Zentner <kzentner@mozilla.com>
# Parent  e1f314312a004b9fe4f8555cb84725bfade771e6
Bug 1178895 - Patch 4: Implement 'contain: layout' for table cell elements.

diff --git a/layout/tables/nsTableCellFrame.cpp b/layout/tables/nsTableCellFrame.cpp
--- a/layout/tables/nsTableCellFrame.cpp
+++ b/layout/tables/nsTableCellFrame.cpp
@@ -719,25 +719,33 @@ nsTableCellFrame::CellHasVisibleContent(
     innerFrame = innerFrame->GetNextSibling();
   }	
   return false;
 }
 
 nscoord
 nsTableCellFrame::GetCellBaseline() const
 {
+  nsIFrame *inner = mFrames.FirstChild();
+
+  // Cell's baseline is just the baseline of the inner frame, shifted down by
+  // the cell's top border/padding.
   // Ignore the position of the inner frame relative to the cell frame
   // since we want the position as though the inner were top-aligned.
-  nsIFrame *inner = mFrames.FirstChild();
-  nscoord borderPadding = GetUsedBorderAndPadding().top;
-  nscoord result;
-  if (nsLayoutUtils::GetFirstLineBaseline(GetWritingMode(), inner, &result))
-    return result + borderPadding;
-  return inner->GetContentRectRelativeToSelf().YMost() +
-         borderPadding;
+  nscoord innerBaseline;
+  if (nsLayoutUtils::IsContainLayout(this)) {
+    // If we're layout-containing, we should pretend that our children's block
+    // size is zero.
+    innerBaseline = 0;
+  } else if (!nsLayoutUtils::GetFirstLineBaseline(GetWritingMode(), inner, &innerBaseline)) {
+    // Our inner frame didn't have a baseline, so use the bottom of out inner
+    // frame's content rect.
+    innerBaseline = inner->GetContentRectRelativeToSelf().YMost();
+  }
+  return innerBaseline + GetUsedBorderAndPadding().top;
 }
 
 int32_t nsTableCellFrame::GetRowSpan()
 {
   int32_t rowSpan=1;
   nsGenericHTMLElement *hc = nsGenericHTMLElement::FromContent(mContent);
 
   // Don't look at the content's rowspan if we're a pseudo cell
@@ -770,28 +778,36 @@ int32_t nsTableCellFrame::GetColSpan()
 }
 
 /* virtual */ nscoord
 nsTableCellFrame::GetMinISize(nsRenderingContext *aRenderingContext)
 {
   nscoord result = 0;
   DISPLAY_MIN_WIDTH(this, result);
 
+  if (nsLayoutUtils::IsContainLayout(this)) {
+    return result;
+  }
+
   nsIFrame *inner = mFrames.FirstChild();
   result = nsLayoutUtils::IntrinsicForContainer(aRenderingContext, inner,
                                                     nsLayoutUtils::MIN_ISIZE);
   return result;
 }
 
 /* virtual */ nscoord
 nsTableCellFrame::GetPrefISize(nsRenderingContext *aRenderingContext)
 {
   nscoord result = 0;
   DISPLAY_PREF_WIDTH(this, result);
 
+  if (nsLayoutUtils::IsContainLayout(this)) {
+    return result;
+  }
+
   nsIFrame *inner = mFrames.FirstChild();
   result = nsLayoutUtils::IntrinsicForContainer(aRenderingContext, inner,
                                                 nsLayoutUtils::PREF_ISIZE);
   return result;
 }
 
 /* virtual */ nsIFrame::IntrinsicISizeOffsetData
 nsTableCellFrame::IntrinsicISizeOffsets()
@@ -988,25 +1004,25 @@ nsTableCellFrame::Reflow(nsPresContext* 
                     wm, kidOrigin, containerSize, 0);
 
   nsTableFrame::InvalidateTableFrame(firstKid, origRect, origVisualOverflow,
                                      firstReflow);
 
   // first, compute the bsize which can be set w/o being restricted by
   // available bsize
   LogicalSize cellSize(wm);
-  cellSize.BSize(wm) = kidSize.BSize(wm);
+  if (!nsLayoutUtils::IsContainLayout(this)) {
+    cellSize.BSize(wm) = kidSize.BSize(wm);
+    cellSize.ISize(wm) = kidSize.ISize(wm);
+  }
 
   if (NS_UNCONSTRAINEDSIZE != cellSize.BSize(wm)) {
     cellSize.BSize(wm) += borderPadding.BStartEnd(wm);
   }
 
-  // next determine the cell's isize
-  cellSize.ISize(wm) = kidSize.ISize(wm);      // at this point, we've factored in the cell's style attributes
-
   // factor in border and padding
   if (NS_UNCONSTRAINEDSIZE != cellSize.ISize(wm)) {
     cellSize.ISize(wm) += borderPadding.IStartEnd(wm);
   }
 
   // set the cell's desired size and max element size
   aDesiredSize.SetSize(wm, cellSize);
 
diff --git a/layout/tables/nsTableRowFrame.cpp b/layout/tables/nsTableRowFrame.cpp
--- a/layout/tables/nsTableRowFrame.cpp
+++ b/layout/tables/nsTableRowFrame.cpp
@@ -429,17 +429,17 @@ nscoord nsTableRowFrame::GetRowBaseline(
   // bp              pb
   // bp              pb
   // bppppppppppppppppb
   // bbbbbbbbbbbbbbbbbb
 
   nscoord ascent = 0;
   nsSize containerSize = GetSize();
   for (nsIFrame* childFrame : mFrames) {
-    if (IS_TABLE_CELL(childFrame->GetType())) {
+    if (IS_TABLE_CELL(childFrame->GetType()) && !nsLayoutUtils::IsContainLayout(childFrame)) {
       nsIFrame* firstKid = childFrame->GetFirstPrincipalChild();
       ascent = std::max(ascent,
                         LogicalRect(aWM, firstKid->GetNormalRect(),
                                     containerSize).BEnd(aWM));
     }
   }
   return ascent;
 }
