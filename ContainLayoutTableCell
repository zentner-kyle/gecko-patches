# HG changeset patch
# User Kyle Zentner <kzentner@mozilla.com>
# Parent  d3a12cd455c1ecb5d1a67af7ce08f121dec89315
Bug 1178895 - Patch 4: Implement 'contain: layout' for table cell elements.

diff --git a/layout/tables/nsTableCellFrame.cpp b/layout/tables/nsTableCellFrame.cpp
--- a/layout/tables/nsTableCellFrame.cpp
+++ b/layout/tables/nsTableCellFrame.cpp
@@ -770,28 +770,36 @@ int32_t nsTableCellFrame::GetColSpan()
 }
 
 /* virtual */ nscoord
 nsTableCellFrame::GetMinISize(nsRenderingContext *aRenderingContext)
 {
   nscoord result = 0;
   DISPLAY_MIN_WIDTH(this, result);
 
+  if (nsLayoutUtils::IsContainLayout(this)) {
+    return result;
+  }
+
   nsIFrame *inner = mFrames.FirstChild();
   result = nsLayoutUtils::IntrinsicForContainer(aRenderingContext, inner,
                                                     nsLayoutUtils::MIN_ISIZE);
   return result;
 }
 
 /* virtual */ nscoord
 nsTableCellFrame::GetPrefISize(nsRenderingContext *aRenderingContext)
 {
   nscoord result = 0;
   DISPLAY_PREF_WIDTH(this, result);
 
+  if (nsLayoutUtils::IsContainLayout(this)) {
+    return result;
+  }
+
   nsIFrame *inner = mFrames.FirstChild();
   result = nsLayoutUtils::IntrinsicForContainer(aRenderingContext, inner,
                                                 nsLayoutUtils::PREF_ISIZE);
   return result;
 }
 
 /* virtual */ nsIFrame::IntrinsicISizeOffsetData
 nsTableCellFrame::IntrinsicISizeOffsets()
@@ -988,25 +996,25 @@ nsTableCellFrame::Reflow(nsPresContext* 
                     wm, kidOrigin, containerSize, 0);
 
   nsTableFrame::InvalidateTableFrame(firstKid, origRect, origVisualOverflow,
                                      firstReflow);
 
   // first, compute the bsize which can be set w/o being restricted by
   // available bsize
   LogicalSize cellSize(wm);
-  cellSize.BSize(wm) = kidSize.BSize(wm);
+  if (!nsLayoutUtils::IsContainLayout(this)) {
+    cellSize.BSize(wm) = kidSize.BSize(wm);
+    cellSize.ISize(wm) = kidSize.ISize(wm);
+  }
 
   if (NS_UNCONSTRAINEDSIZE != cellSize.BSize(wm)) {
     cellSize.BSize(wm) += borderPadding.BStartEnd(wm);
   }
 
-  // next determine the cell's isize
-  cellSize.ISize(wm) = kidSize.ISize(wm);      // at this point, we've factored in the cell's style attributes
-
   // factor in border and padding
   if (NS_UNCONSTRAINEDSIZE != cellSize.ISize(wm)) {
     cellSize.ISize(wm) += borderPadding.IStartEnd(wm);
   }
 
   // set the cell's desired size and max element size
   aDesiredSize.SetSize(wm, cellSize);
 
