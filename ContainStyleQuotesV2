# HG changeset patch
# User Kyle Zentner <kzentner@mozilla.com>
# Parent  bbdc6620f2df8f148c0dc75682b9cb0f46204a72
Bug 1172087 - Patch 4: Contain quote depth with CSS 'contain: style'.

diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -1541,23 +1541,26 @@ nsCSSFrameConstructor::nsCSSFrameConstru
 }
 
 void
 nsCSSFrameConstructor::NotifyDestroyingFrame(nsIFrame* aFrame)
 {
   NS_PRECONDITION(mUpdateCount != 0,
                   "Should be in an update while destroying frames");
 
+  // XXX kzentner: Can we already know our style root here?
+  nsIFrame *styleRoot = FindContainStyleRoot(aFrame);
+
   if (aFrame->GetStateBits() & NS_FRAME_GENERATED_CONTENT) {
-    if (mQuoteList.DestroyNodesFor(aFrame))
+    if (mQuotesManager.DestroyNodesFor(styleRoot, aFrame))
       QuotesDirty();
-  }
-
-  // XXX kzentner: Can we already know our style root here?
-  if (mCounterManager.DestroyNodesFor(FindContainStyleRoot(aFrame), aFrame)) {
+      mQuotesManager.MarkContainStyleRootDirty(styleRoot);
+  }
+
+  if (mCounterManager.DestroyNodesFor(styleRoot, aFrame)) {
     // Technically we don't need to update anything if we destroyed only
     // USE nodes.  However, this is unlikely to happen in the real world
     // since USE nodes generally go along with INCREMENT nodes.
     CountersDirty();
   }
 
   RestyleManager()->NotifyDestroyingFrame(aFrame);
 
@@ -1697,18 +1700,20 @@ nsCSSFrameConstructor::CreateGeneratedCo
   case eStyleContentType_CloseQuote:
   case eStyleContentType_NoOpenQuote:
   case eStyleContentType_NoCloseQuote:
     {
       nsQuoteNode* node =
         new nsQuoteNode(type, aContentIndex);
 
       nsGenConInitializer* initializer =
-        new nsGenConInitializer(node, &mQuoteList,
+        new nsGenConInitializer(node,
+                                mQuotesManager.GetList(GetContainStyleRoot(aParentFrame)),
                                 &nsCSSFrameConstructor::QuotesDirty);
+      mQuotesManager.MarkContainStyleRootDirty(GetContainStyleRoot(aParentFrame));
       return CreateGenConTextNode(aState, EmptyString(), &node->mText,
                                   initializer);
     }
 
   case eStyleContentType_AltContent:
     {
       // Use the "alt" attribute; if that fails and the node is an HTML
       // <input>, try the value attribute and then fall back to some default
@@ -8494,17 +8499,17 @@ nsCSSFrameConstructor::EndUpdate()
   --mUpdateCount;
 }
 
 void
 nsCSSFrameConstructor::RecalcQuotesAndCounters()
 {
   if (mQuotesDirty) {
     mQuotesDirty = false;
-    mQuoteList.RecalcAll();
+    mQuotesManager.RecalcDirty();
   }
 
   if (mCountersDirty) {
     mCountersDirty = false;
     mCounterManager.RecalcDirty();
   }
 
   NS_ASSERTION(!mQuotesDirty, "Quotes updates will be lost");
@@ -8524,17 +8529,17 @@ nsCSSFrameConstructor::WillDestroyFrameT
 {
 #if defined(DEBUG_dbaron_off)
   mCounterManager.Dump();
 #endif
 
   mIsDestroyingFrameTree = true;
 
   // Prevent frame tree destruction from being O(N^2)
-  mQuoteList.Clear();
+  mQuotesManager.Clear();
   mCounterManager.Clear();
 
   // Remove our presshell as a style flush observer.  But leave
   // RestyleManager::mObservingRefreshDriver true so we don't readd to
   // it even if someone tries to post restyle events on us from this
   // point on for some reason.
   mPresShell->GetPresContext()->RefreshDriver()->
     RemoveStyleFlushObserver(mPresShell);
diff --git a/layout/base/nsCSSFrameConstructor.h b/layout/base/nsCSSFrameConstructor.h
--- a/layout/base/nsCSSFrameConstructor.h
+++ b/layout/base/nsCSSFrameConstructor.h
@@ -2086,17 +2086,17 @@ private:
   nsContainerFrame*   mRootElementFrame;
   // This is the frame for the root element that has no pseudo-element style.
   nsIFrame*           mRootElementStyleFrame;
   // This is the containing block that contains the root element ---
   // the real "initial containing block" according to CSS 2.1.
   nsContainerFrame*   mDocElementContainingBlock;
   nsIFrame*           mGfxScrollFrame;
   nsIFrame*           mPageSequenceFrame;
-  nsQuoteList         mQuoteList;
+  nsQuotesManager     mQuotesManager;
   nsCounterManager    mCounterManager;
   nsIFrame*           mContainStyleRoot;
   // Current ProcessChildren depth.
   uint16_t            mCurrentDepth;
   uint16_t            mUpdateCount;
   bool                mQuotesDirty : 1;
   bool                mCountersDirty : 1;
   bool                mIsDestroyingFrameTree : 1;
diff --git a/layout/base/nsQuoteList.h b/layout/base/nsQuoteList.h
--- a/layout/base/nsQuoteList.h
+++ b/layout/base/nsQuoteList.h
@@ -84,9 +84,59 @@ public:
   }
   
   void RecalcAll();
 #ifdef DEBUG
   void PrintChain();
 #endif
 };
 
+
+class nsQuotesManager {
+private:
+  struct RootTableEntry {
+    nsQuoteList mList;
+    bool        mDirty;
+  };
+
+  nsClassHashtable<nsPtrHashKey<const nsIFrame>, RootTableEntry> mContainStyleRootLists;
+
+public:
+
+  bool DestroyNodesFor(nsIFrame* aContainStyleRoot, nsIFrame* aFrame) {
+    mContainStyleRootLists.Remove(aFrame);
+    nsQuoteList* rootList = GetList(aContainStyleRoot, false);
+    if (rootList) {
+      return rootList->DestroyNodesFor(aFrame);
+    }
+    return false;
+  }
+
+  nsQuoteList* GetList(const nsIFrame* aContainStyleRoot, bool aShouldCreate = true) {
+    nsQuoteList* list = &mContainStyleRootLists.Get(aContainStyleRoot)->mList;
+    if (!list && aShouldCreate) {
+      RootTableEntry* entry = new RootTableEntry();
+      list = &entry->mList;
+      mContainStyleRootLists.Put(aContainStyleRoot, entry);
+    }
+    return list;
+  }
+
+  void MarkContainStyleRootDirty(const nsIFrame* aContainStyleRoot) {
+    mContainStyleRootLists.Get(aContainStyleRoot)->mDirty = true;
+  }
+
+  void RecalcDirty() {
+    for (auto iter = mContainStyleRootLists.ConstIter(); !iter.Done(); iter.Next()) {
+      RootTableEntry* entry = iter.Data();
+      if (entry->mDirty) {
+        entry->mDirty = false;
+        entry->mList.RecalcAll();
+      }
+    }
+  }
+
+  void Clear() {
+    mContainStyleRootLists.Clear();
+  }
+};
+
 #endif /* nsQuoteList_h___ */
