# HG changeset patch
# User Kyle Zentner <kzentner@mozilla.com>
# Parent  8f89915e02d46d1cbfa307f1126f9e21cc1d54da
Bug 1178895 - Patch 2: Implement 'contain: layout' for nsBlockFrame.

diff --git a/layout/generic/nsBlockFrame.cpp b/layout/generic/nsBlockFrame.cpp
--- a/layout/generic/nsBlockFrame.cpp
+++ b/layout/generic/nsBlockFrame.cpp
@@ -674,16 +674,20 @@ nsBlockFrame::GetMinISize(nsRenderingCon
 
   DISPLAY_MIN_WIDTH(this, mMinWidth);
 
   CheckIntrinsicCacheAgainstShrinkWrapState();
 
   if (mMinWidth != NS_INTRINSIC_WIDTH_UNKNOWN)
     return mMinWidth;
 
+  if (nsLayoutUtils::IsContainLayout(this)) {
+    return 0;
+  }
+
 #ifdef DEBUG
   if (gNoisyIntrinsic) {
     IndentBy(stdout, gNoiseIndent);
     ListTag(stdout);
     printf(": GetMinISize\n");
   }
   AutoNoisyIndenter indenter(gNoisyIntrinsic);
 #endif
@@ -759,16 +763,20 @@ nsBlockFrame::GetPrefISize(nsRenderingCo
 
   DISPLAY_PREF_WIDTH(this, mPrefWidth);
 
   CheckIntrinsicCacheAgainstShrinkWrapState();
 
   if (mPrefWidth != NS_INTRINSIC_WIDTH_UNKNOWN)
     return mPrefWidth;
 
+  if (nsLayoutUtils::IsContainLayout(this)) {
+    return 0;
+  }
+
 #ifdef DEBUG
   if (gNoisyIntrinsic) {
     IndentBy(stdout, gNoiseIndent);
     ListTag(stdout);
     printf(": GetPrefISize\n");
   }
   AutoNoisyIndenter indenter(gNoisyIntrinsic);
 #endif
@@ -1591,16 +1599,24 @@ nsBlockFrame::ComputeFinalSize(const nsH
   FrameProperties properties = Properties();
   if (blockEndEdgeOfChildren != finalSize.BSize(wm) - borderPadding.BEnd(wm)) {
     properties.Set(BlockEndEdgeOfChildrenProperty(),
                    NS_INT32_TO_PTR(blockEndEdgeOfChildren));
   } else {
     properties.Delete(BlockEndEdgeOfChildrenProperty());
   }
 
+  if (nsLayoutUtils::IsContainLayout(this) && NS_UNCONSTRAINEDSIZE == aReflowState.ComputedBSize()) {
+    // If we're layout-containing and we don't have a specified size, then our
+    // final size should actually be computed from only our border and padding,
+    // as though we were empty.
+    // However, we still need the code above to run in order to calculate
+    // overflow regions.
+    finalSize.BSize(wm) = borderPadding.BStart(wm) + borderPadding.BEnd(wm);
+  }
   aMetrics.SetSize(wm, finalSize);
 
 #ifdef DEBUG_blocks
   if (CRAZY_SIZE(aMetrics.Width()) || CRAZY_SIZE(aMetrics.Height())) {
     ListTag(stdout);
     printf(": WARNING: desired:%d,%d\n", aMetrics.Width(), aMetrics.Height());
   }
 #endif
