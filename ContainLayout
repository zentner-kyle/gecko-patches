# HG changeset patch
# User Kyle Zentner <kzentner@mozilla.com>
# Parent  aca1404277c999e0f2ed11c681dd47c985c5af1d

diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -32,16 +32,17 @@
 #include "nsPresShell.h"
 #include "nsIPresShell.h"
 #include "nsUnicharUtils.h"
 #include "nsStyleSet.h"
 #include "nsViewManager.h"
 #include "nsStyleConsts.h"
 #include "nsIDOMXULElement.h"
 #include "nsContainerFrame.h"
+#include "nsContainmentFrame.h"
 #include "nsNameSpaceManager.h"
 #include "nsIComboboxControlFrame.h"
 #include "nsIListControlFrame.h"
 #include "nsIDOMCharacterData.h"
 #include "nsPlaceholderFrame.h"
 #include "nsTableRowGroupFrame.h"
 #include "nsIFormControl.h"
 #include "nsCSSAnonBoxes.h"
@@ -1205,17 +1206,17 @@ nsFrameConstructorState::AddChild(nsIFra
                                                        aStyleContext,
                                                        aParentFrame,
                                                        nullptr,
                                                        placeholderType);
 
     placeholderFrame->AddStateBits(mAdditionalStateBits);
     // Add the placeholder frame to the flow
     aFrameItems.AddChild(placeholderFrame);
-  }
+  } 
 #ifdef DEBUG
   else {
     NS_ASSERTION(aNewFrame->GetParent() == aParentFrame,
                  "In-flow frame has wrong parent");
   }
 #endif
 
   if (aInsertAfter) {
@@ -3744,21 +3745,29 @@ nsCSSFrameConstructor::ConstructFrameFro
   } else {
     ancestorPusher.PushStyleScope(content);
   }
 
   nsIFrame* newFrame;
   nsIFrame* primaryFrame;
   nsStyleContext* const styleContext = aItem.mStyleContext;
   const nsStyleDisplay* display = styleContext->StyleDisplay();
+  nsFrameItems containedItems;
+  nsFrameItems *items = &aFrameItems;
+  nsContainerFrame *container = nullptr;
+  if (display->IsLayoutContaining()) {
+    items = &containedItems;
+    container = BuildContainment(aState, content, styleContext,
+                                 aParentFrame, aFrameItems);
+    aParentFrame = container;
+  }
   if (bits & FCDATA_FUNC_IS_FULL_CTOR) {
     newFrame =
       (this->*(data->mFullConstructor))(aState, aItem, aParentFrame,
-                                        display, aFrameItems);
-    MOZ_ASSERT(newFrame, "Full constructor failed");
+                                        display, *items);
     primaryFrame = newFrame;
   } else {
     newFrame =
       (*data->mFunc.mCreationFunc)(mPresShell, styleContext);
 
     bool allowOutOfFlow = !(bits & FCDATA_DISALLOW_OUT_OF_FLOW);
     bool isPopup = aItem.mIsPopup;
     NS_ASSERTION(!isPopup ||
@@ -3825,17 +3834,17 @@ nsCSSFrameConstructor::ConstructFrameFro
         maybeAbsoluteContainingBlock = blockFrame;
         maybeAbsoluteContainingBlockStyleFrame = blockFrame;
       }
 
       // Our kids should go into the blockFrame
       newFrame = blockFrame;
     }
 
-    aState.AddChild(frameToAddToList, aFrameItems, content, styleContext,
+    aState.AddChild(frameToAddToList, *items, content, styleContext,
                     aParentFrame, allowOutOfFlow, allowOutOfFlow, isPopup);
 
     nsContainerFrame* newFrameAsContainer = do_QueryFrame(newFrame);
     if (newFrameAsContainer) {
 #ifdef MOZ_XUL
       // Icky XUL stuff, sadly
 
       if (aItem.mIsRootPopupgroup) {
@@ -3929,16 +3938,19 @@ nsCSSFrameConstructor::ConstructFrameFro
       }
 
       // Set the frame's initial child list
       // Note that MathML depends on this being called even if
       // childItems is empty!
       newFrameAsContainer->SetInitialChildList(kPrincipalList, childItems);
     }
   }
+  if (container) {
+    AddContainedChildren(aState, content, container, containedItems);
+  }
 
 #ifdef MOZ_XUL
   // More icky XUL stuff
   if (aItem.mNameSpaceID == kNameSpaceID_XUL &&
       (aItem.mTag == nsGkAtoms::treechildren || // trees always need titletips
        content->HasAttr(kNameSpaceID_None, nsGkAtoms::tooltiptext) ||
        content->HasAttr(kNameSpaceID_None, nsGkAtoms::tooltip))) {
     nsIRootBox* rootBox = nsIRootBox::GetRootBox(mPresShell);
@@ -4442,16 +4454,45 @@ nsCSSFrameConstructor::BeginBuildingScro
 
   if (gfxScrollFrame) {
      gfxScrollFrame->SetInitialChildList(kPrincipalList, anonymousItems);
   }
 
   return scrolledChildStyle.forget();
 }
 
+nsContainerFrame*
+nsCSSFrameConstructor::BuildContainment(nsFrameConstructorState& aState,
+                                        nsIContent*              aContent,
+                                        nsStyleContext*          aContentStyle,
+                                        nsContainerFrame*        aParentFrame,
+                                        nsFrameItems            &aParentItems)
+{
+  nsRefPtr<nsStyleContext> containerStyle =
+    mPresShell->StyleSet()->ResolveAnonymousBoxStyle(nsCSSAnonBoxes::containment,
+                                                     aContentStyle);
+
+  nsContainerFrame *container = new (mPresShell) nsContainmentFrame(containerStyle);
+  InitAndRestoreFrame(aState, aContent, aParentFrame, container);
+  aState.AddChild(container, aParentItems, aContent, aContentStyle,
+                  aParentFrame, true, true, false);
+
+  return container;
+}
+
+void
+nsCSSFrameConstructor::AddContainedChildren(nsFrameConstructorState& aState,
+                                            nsIContent*              aContent,
+                                            nsContainerFrame*        aContainer,
+                                            nsFrameItems            &aContained)
+{
+  CreateAnonymousFrames(aState, aContent, aContainer, nullptr, aContained);
+  aContainer->SetInitialChildList(kPrincipalList, aContained);
+}
+
 void
 nsCSSFrameConstructor::FinishBuildingScrollFrame(nsContainerFrame* aScrollFrame,
                                                  nsIFrame* aScrolledFrame)
 {
   nsFrameList scrolled(aScrolledFrame, aScrolledFrame);
   aScrollFrame->AppendFrames(kPrincipalList, scrolled);
 }
 
diff --git a/layout/base/nsCSSFrameConstructor.h b/layout/base/nsCSSFrameConstructor.h
--- a/layout/base/nsCSSFrameConstructor.h
+++ b/layout/base/nsCSSFrameConstructor.h
@@ -1615,16 +1615,28 @@ private:
   void
   BuildScrollFrame(nsFrameConstructorState& aState,
                    nsIContent*              aContent,
                    nsStyleContext*          aContentStyle,
                    nsIFrame*                aScrolledFrame,
                    nsContainerFrame*        aParentFrame,
                    nsContainerFrame*&       aNewFrame);
 
+  nsContainerFrame*
+  BuildContainment(nsFrameConstructorState& aState,
+                   nsIContent*              aContent,
+                   nsStyleContext*          aContentStyle,
+                   nsContainerFrame*        aParentFrame,
+                   nsFrameItems            &aParentItems);
+  void
+  AddContainedChildren(nsFrameConstructorState& aState,
+                      nsIContent*              aContent,
+                      nsContainerFrame*        aContainer,
+                      nsFrameItems            &aContained);
+
   // Builds the initial ScrollFrame
   already_AddRefed<nsStyleContext>
   BeginBuildingScrollFrame(nsFrameConstructorState& aState,
                            nsIContent*              aContent,
                            nsStyleContext*          aContentStyle,
                            nsContainerFrame*        aParentFrame,
                            nsIAtom*                 aScrolledPseudo,
                            bool                     aIsRoot,
diff --git a/layout/generic/moz.build b/layout/generic/moz.build
--- a/layout/generic/moz.build
+++ b/layout/generic/moz.build
@@ -118,16 +118,17 @@ UNIFIED_SOURCES += [
     'nsBlockFrame.cpp',
     'nsBlockReflowContext.cpp',
     'nsBlockReflowState.cpp',
     'nsBRFrame.cpp',
     'nsBulletFrame.cpp',
     'nsCanvasFrame.cpp',
     'nsColumnSetFrame.cpp',
     'nsContainerFrame.cpp',
+    'nsContainmentFrame.cpp',
     'nsFirstLetterFrame.cpp',
     'nsFlexContainerFrame.cpp',
     'nsFloatManager.cpp',
     'nsFontInflationData.cpp',
     'nsFrame.cpp',
     'nsFrameList.cpp',
     'nsFrameSetFrame.cpp',
     'nsFrameState.cpp',
diff --git a/layout/generic/nsContainmentFrame.cpp b/layout/generic/nsContainmentFrame.cpp
new file mode 100644
--- /dev/null
+++ b/layout/generic/nsContainmentFrame.cpp
@@ -0,0 +1,27 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+
+#include "nsContainmentFrame.h"
+
+#include "nsFrameManager.h"
+#include "nsLayoutUtils.h"
+
+
+NS_IMPL_FRAMEARENA_HELPERS(nsContainmentFrame)
+
+#ifdef DEBUG
+NS_QUERYFRAME_HEAD(nsContainmentFrame)
+  NS_QUERYFRAME_ENTRY(nsContainmentFrame)
+NS_QUERYFRAME_TAIL_INHERITING(nsFrame)
+#endif
+
+#ifdef DEBUG_FRAME_DUMP
+nsresult
+nsContainmentFrame::GetFrameName(nsAString& aResult) const
+{
+  return MakeFrameName(NS_LITERAL_STRING("Containment"), aResult);
+}
+#endif
diff --git a/layout/generic/nsContainmentFrame.h b/layout/generic/nsContainmentFrame.h
new file mode 100644
--- /dev/null
+++ b/layout/generic/nsContainmentFrame.h
@@ -0,0 +1,30 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef nsContainmentFrame_h___
+#define nsContainmentFrame_h___
+
+//#include "mozilla/Attributes.h"
+#include "nsFrame.h"
+
+class nsContainmentFrame final : public nsContainerFrame {
+public:
+  NS_DECL_FRAMEARENA_HELPERS
+#ifdef DEBUG
+  NS_DECL_QUERYFRAME_TARGET(nsContainmentFrame)
+  NS_DECL_QUERYFRAME
+#endif
+
+  nsContainmentFrame(nsStyleContext* aContext)
+    : nsContainerFrame(aContext)
+  {
+  }
+
+#ifdef DEBUG_FRAME_DUMP
+  virtual nsresult GetFrameName(nsAString& aResult) const override;
+#endif // DEBUG
+};
+
+#endif /* nsContainmentFrame_h___ */
diff --git a/layout/generic/nsFrameIdList.h b/layout/generic/nsFrameIdList.h
--- a/layout/generic/nsFrameIdList.h
+++ b/layout/generic/nsFrameIdList.h
@@ -11,16 +11,17 @@ FRAME_ID(nsBoxFrame)
 FRAME_ID(nsBulletFrame)
 FRAME_ID(nsButtonBoxFrame)
 FRAME_ID(nsCanvasFrame)
 FRAME_ID(nsColorControlFrame)
 FRAME_ID(nsColumnSetFrame)
 FRAME_ID(nsComboboxControlFrame)
 FRAME_ID(nsComboboxDisplayFrame)
 FRAME_ID(nsContainerFrame)
+FRAME_ID(nsContainmentFrame)
 FRAME_ID(nsContinuingTextFrame)
 FRAME_ID(nsDeckFrame)
 FRAME_ID(nsDocElementBoxFrame)
 FRAME_ID(nsFieldSetFrame)
 FRAME_ID(nsFileControlFrame)
 FRAME_ID(nsFirstLetterFrame)
 FRAME_ID(nsFirstLineFrame)
 FRAME_ID(nsFlexContainerFrame)
diff --git a/layout/reftests/css-contain/layout-zero.html b/layout/reftests/css-contain/layout-zero.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/css-contain/layout-zero.html
@@ -0,0 +1,35 @@
+
+<!DOCTYPE HTML>
+<html>
+<head>
+  <meta charset="utf-8">
+  <style>
+  body {
+    margin: 0;
+  }
+  .container {
+    contain: layout;
+    background: red;
+    border: 1em solid green;
+  }
+  </style>
+</head>
+<body class="reftest-paint">
+  <div class="fun">
+    <div>
+      This is some content before the contained element.
+    </div>
+    <div>
+      This is a parent of the contained element.
+      <div class="container">
+        <div>
+    Lorem ipsum dolor sit amet, cu per agam quaerendum reprehendunt, scripta vivendo perfecto vis eu. Sea fastidii principes an. Sed in duis senserit, et cum impedit voluptaria, in nam sumo affert recteque. Sanctus suavitate voluptatibus te ius. Eos id insolens gloriatur repudiandae, vim in adhuc principes reprimique, vis ad omnium pericula reprimique.
+        </div>
+      </div>
+    </div>
+    <div>
+      This is some content after the contained element.
+    </div>
+  </div>
+</body>
+</html>
diff --git a/layout/style/nsCSSAnonBoxList.h b/layout/style/nsCSSAnonBoxList.h
--- a/layout/style/nsCSSAnonBoxList.h
+++ b/layout/style/nsCSSAnonBoxList.h
@@ -56,16 +56,17 @@ CSS_ANON_BOX(page, ":-moz-page")
 CSS_ANON_BOX(pageContent, ":-moz-pagecontent")
 CSS_ANON_BOX(pageSequence, ":-moz-page-sequence")
 CSS_ANON_BOX(scrolledContent, ":-moz-scrolled-content")
 CSS_ANON_BOX(scrolledCanvas, ":-moz-scrolled-canvas")
 CSS_ANON_BOX(scrolledPageSequence, ":-moz-scrolled-page-sequence")
 CSS_ANON_BOX(columnContent, ":-moz-column-content")
 CSS_ANON_BOX(viewport, ":-moz-viewport")
 CSS_ANON_BOX(viewportScroll, ":-moz-viewport-scroll")
+CSS_ANON_BOX(containment, ":-moz-containment")
 
 // Inside a flex container, a contiguous run of text gets wrapped in
 // an anonymous block, which is then treated as a flex item.
 CSS_ANON_BOX(anonymousFlexItem, ":-moz-anonymous-flex-item")
 
 // Inside a grid container, a contiguous run of text gets wrapped in
 // an anonymous block, which is then treated as a grid item.
 CSS_ANON_BOX(anonymousGridItem, ":-moz-anonymous-grid-item")
diff --git a/layout/style/nsStyleSet.cpp b/layout/style/nsStyleSet.cpp
--- a/layout/style/nsStyleSet.cpp
+++ b/layout/style/nsStyleSet.cpp
@@ -800,16 +800,34 @@ nsStyleSet::GetContext(nsStyleContext* a
 {
   NS_PRECONDITION((!aPseudoTag &&
                    aPseudoType ==
                      nsCSSPseudoElements::ePseudo_NotPseudoElement) ||
                   (aPseudoTag &&
                    nsCSSPseudoElements::GetPseudoType(aPseudoTag) ==
                      aPseudoType),
                   "Pseudo mismatch");
+  if (!((!aPseudoTag &&
+                   aPseudoType ==
+                     nsCSSPseudoElements::ePseudo_NotPseudoElement) ||
+                  (aPseudoTag &&
+                   nsCSSPseudoElements::GetPseudoType(aPseudoTag) ==
+                     aPseudoType))) {
+    NS_ASSERTION(aPseudoTag, "");
+    NS_ASSERTION((!aPseudoTag &&
+                    aPseudoType ==
+                      nsCSSPseudoElements::ePseudo_NotPseudoElement), "");
+    NS_ASSERTION((aPseudoTag &&
+                    nsCSSPseudoElements::GetPseudoType(aPseudoTag) ==
+                      aPseudoType), "");
+    NS_ASSERTION(aPseudoTag == nsCSSAnonBoxes::containment, "");
+    printf("aPseudoTag = %p\n", aPseudoTag);
+    printf("nsCSSPseudoElements::GetPseudoType(aPseudoTag) = %d\n", nsCSSPseudoElements::GetPseudoType(aPseudoTag));
+    printf("aPseudoType = %d\n", aPseudoType);
+  }
 
   if (aVisitedRuleNode == aRuleNode) {
     // No need to force creation of a visited style in this case.
     aVisitedRuleNode = nullptr;
   }
 
   // Ensure |aVisitedRuleNode != nullptr| corresponds to the need to
   // create an if-visited style context, and that in that case, we have
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -2233,16 +2233,20 @@ struct nsStyleDisplay {
     return mOverflowX != NS_STYLE_OVERFLOW_VISIBLE &&
            mOverflowX != NS_STYLE_OVERFLOW_CLIP;
   }
 
   bool IsStyleContaining() const {
     return NS_STYLE_CONTAIN_STYLE & mContain;
   }
 
+  bool IsLayoutContaining() const {
+    return NS_STYLE_CONTAIN_LAYOUT & mContain;
+  }
+
   /* Returns whether the element has the -moz-transform property
    * or a related property. */
   bool HasTransformStyle() const {
     return mSpecifiedTransform != nullptr ||
            mTransformStyle == NS_STYLE_TRANSFORM_STYLE_PRESERVE_3D ||
            (mWillChangeBitField & NS_STYLE_WILL_CHANGE_TRANSFORM);
   }
 
