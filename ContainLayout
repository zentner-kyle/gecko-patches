# HG changeset patch
# User Kyle Zentner <kzentner@mozilla.com>
# Parent  bbea1121fed7b975101f19c0692379d3df7882c4
Bug 1178895 - Patch 1: Implement CSS 'contain: layout'.

diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -32,16 +32,17 @@
 #include "nsPresShell.h"
 #include "nsIPresShell.h"
 #include "nsUnicharUtils.h"
 #include "nsStyleSet.h"
 #include "nsViewManager.h"
 #include "nsStyleConsts.h"
 #include "nsIDOMXULElement.h"
 #include "nsContainerFrame.h"
+#include "nsContainmentFrame.h"
 #include "nsNameSpaceManager.h"
 #include "nsIComboboxControlFrame.h"
 #include "nsIListControlFrame.h"
 #include "nsIDOMCharacterData.h"
 #include "nsPlaceholderFrame.h"
 #include "nsTableRowGroupFrame.h"
 #include "nsIFormControl.h"
 #include "nsCSSAnonBoxes.h"
@@ -3744,20 +3745,29 @@ nsCSSFrameConstructor::ConstructFrameFro
   } else {
     ancestorPusher.PushStyleScope(content);
   }
 
   nsIFrame* newFrame;
   nsIFrame* primaryFrame;
   nsStyleContext* const styleContext = aItem.mStyleContext;
   const nsStyleDisplay* display = styleContext->StyleDisplay();
+  nsFrameItems containedItems;
+  nsFrameItems *items = &aFrameItems;
+  nsContainerFrame *container = nullptr;
+  if (display->IsContainLayout()) {
+    items = &containedItems;
+    container = BuildContainment(aState, content, styleContext,
+                                 aParentFrame, aFrameItems);
+    aParentFrame = container;
+  }
   if (bits & FCDATA_FUNC_IS_FULL_CTOR) {
     newFrame =
       (this->*(data->mFullConstructor))(aState, aItem, aParentFrame,
-                                        display, aFrameItems);
+                                        display, *items);
     MOZ_ASSERT(newFrame, "Full constructor failed");
     primaryFrame = newFrame;
   } else {
     newFrame =
       (*data->mFunc.mCreationFunc)(mPresShell, styleContext);
 
     bool allowOutOfFlow = !(bits & FCDATA_DISALLOW_OUT_OF_FLOW);
     bool isPopup = aItem.mIsPopup;
@@ -3825,17 +3835,17 @@ nsCSSFrameConstructor::ConstructFrameFro
         maybeAbsoluteContainingBlock = blockFrame;
         maybeAbsoluteContainingBlockStyleFrame = blockFrame;
       }
 
       // Our kids should go into the blockFrame
       newFrame = blockFrame;
     }
 
-    aState.AddChild(frameToAddToList, aFrameItems, content, styleContext,
+    aState.AddChild(frameToAddToList, *items, content, styleContext,
                     aParentFrame, allowOutOfFlow, allowOutOfFlow, isPopup);
 
     nsContainerFrame* newFrameAsContainer = do_QueryFrame(newFrame);
     if (newFrameAsContainer) {
 #ifdef MOZ_XUL
       // Icky XUL stuff, sadly
 
       if (aItem.mIsRootPopupgroup) {
@@ -3962,16 +3972,19 @@ nsCSSFrameConstructor::ConstructFrameFro
   // on aItem.
   if ((!aState.mCreatingExtraFrames ||
        ((primaryFrame->GetStateBits() & NS_FRAME_GENERATED_CONTENT) &&
         !aItem.mContent->GetPrimaryFrame())) &&
        !(bits & FCDATA_SKIP_FRAMESET)) {
     aItem.mContent->SetPrimaryFrame(primaryFrame);
     ActiveLayerTracker::TransferActivityToFrame(aItem.mContent, primaryFrame);
   }
+  if (container) {
+    AddContainedChildren(aState, content, container, containedItems);
+  }
 }
 
 // after the node has been constructed and initialized create any
 // anonymous content a node needs.
 nsresult
 nsCSSFrameConstructor::CreateAnonymousFrames(nsFrameConstructorState& aState,
                                              nsIContent*              aParent,
                                              nsContainerFrame*        aParentFrame,
@@ -4442,16 +4455,48 @@ nsCSSFrameConstructor::BeginBuildingScro
 
   if (gfxScrollFrame) {
      gfxScrollFrame->SetInitialChildList(kPrincipalList, anonymousItems);
   }
 
   return scrolledChildStyle.forget();
 }
 
+nsContainerFrame*
+nsCSSFrameConstructor::BuildContainment(nsFrameConstructorState& aState,
+                                        nsIContent*              aContent,
+                                        nsStyleContext*          aContentStyle,
+                                        nsContainerFrame*        aParentFrame,
+                                        nsFrameItems            &aParentItems)
+{
+  nsRefPtr<nsStyleContext> containerStyle =
+    mPresShell->StyleSet()->ResolveAnonymousBoxStyle(nsCSSAnonBoxes::containment,
+                                                     aContentStyle);
+
+  nsContainerFrame *container = new (mPresShell) nsContainmentFrame(containerStyle);
+  //containerStyle->StyleDisplay()->mDisplay = aContentStyle->StyleDisplay()->mDisplay;
+  //nsContainerFrame *container = NS_NewBlockFrame(mPresShell, containerStyle);
+  InitAndRestoreFrame(aState, aContent, aParentFrame, container);
+  aState.AddChild(container, aParentItems, aContent, aContentStyle,
+                  aParentFrame, true, true, false);
+
+  return container;
+}
+
+void
+nsCSSFrameConstructor::AddContainedChildren(nsFrameConstructorState& aState,
+                                            nsIContent*              aContent,
+                                            nsContainerFrame*        aContainer,
+                                            nsFrameItems            &aContained)
+{
+  CreateAnonymousFrames(aState, aContent, aContainer, nullptr, aContained);
+  aContainer->SetInitialChildList(kPrincipalList, aContained);
+  //aContent->SetPrimaryFrame(aContainer);
+}
+
 void
 nsCSSFrameConstructor::FinishBuildingScrollFrame(nsContainerFrame* aScrollFrame,
                                                  nsIFrame* aScrolledFrame)
 {
   nsFrameList scrolled(aScrolledFrame, aScrolledFrame);
   aScrollFrame->AppendFrames(kPrincipalList, scrolled);
 }
 
@@ -7985,29 +8030,34 @@ nsCSSFrameConstructor::ContentRemoved(ns
     if (gReallyNoisyContentUpdates) {
       aContainer->List(stdout, 0);
     }
   }
 #endif
 
   nsresult rv = NS_OK;
   nsIFrame* childFrame = aChild->GetPrimaryFrame();
+  // We need to ensure we remove the containing frame, and not its child.
+  while (childFrame && childFrame->StyleDisplay()->IsContainLayout()) {
+    childFrame = childFrame->GetParent();
+  }
   if (!childFrame || childFrame->GetContent() != aChild) {
     // XXXbz the GetContent() != aChild check is needed due to bug 135040.
     // Remove it once that's fixed.
     ClearUndisplayedContentIn(aChild, aContainer);
   }
   MOZ_ASSERT(!childFrame || !GetDisplayContentsStyleFor(aChild),
              "display:contents nodes shouldn't have a frame");
   if (!childFrame && GetDisplayContentsStyleFor(aChild)) {
     nsIFrame* ancestorFrame = nullptr;
     nsIContent* ancestor = aContainer;
     for (; ancestor; ancestor = ancestor->GetParent()) {
       ancestorFrame = ancestor->GetPrimaryFrame();
-      if (ancestorFrame) {
+      // We need to ensure we remove the containing frame, and not its child.
+      if (ancestorFrame && !ancestorFrame->StyleDisplay()->IsContainLayout()) {
         break;
       }
     }
     if (ancestorFrame) {
       nsTArray<nsIContent*>* generated = ancestorFrame->GetGenConPseudos();
       if (generated) {
         *aDidReconstruct = true;
         LAYOUT_PHASE_TEMP_EXIT();
@@ -10255,16 +10305,17 @@ nsCSSFrameConstructor::ConstructFramesFr
   CreateNeededAnonFlexOrGridItems(aState, aItems, aParentFrame);
   CreateNeededPseudoInternalRubyBoxes(aState, aItems, aParentFrame);
   CreateNeededPseudoSiblings(aState, aItems, aParentFrame);
 
   aItems.SetTriedConstructingFrames();
   for (FCItemIterator iter(aItems); !iter.IsDone(); iter.Next()) {
     NS_ASSERTION(iter.item().DesiredParentType() == GetParentType(aParentFrame),
                  "Needed pseudos didn't get created; expect bad things");
+    /// XXXkzentner: Maybe insert nsContainmentFrame here?
     ConstructFramesFromItem(aState, iter, aParentFrame, aFrameItems);
   }
 
   NS_ASSERTION(!aState.mHavePendingPopupgroup,
                "Should have proccessed it by now");
 }
 
 void
diff --git a/layout/base/nsCSSFrameConstructor.h b/layout/base/nsCSSFrameConstructor.h
--- a/layout/base/nsCSSFrameConstructor.h
+++ b/layout/base/nsCSSFrameConstructor.h
@@ -1615,16 +1615,28 @@ private:
   void
   BuildScrollFrame(nsFrameConstructorState& aState,
                    nsIContent*              aContent,
                    nsStyleContext*          aContentStyle,
                    nsIFrame*                aScrolledFrame,
                    nsContainerFrame*        aParentFrame,
                    nsContainerFrame*&       aNewFrame);
 
+  nsContainerFrame*
+  BuildContainment(nsFrameConstructorState& aState,
+                   nsIContent*              aContent,
+                   nsStyleContext*          aContentStyle,
+                   nsContainerFrame*        aParentFrame,
+                   nsFrameItems            &aParentItems);
+  void
+  AddContainedChildren(nsFrameConstructorState& aState,
+                      nsIContent*              aContent,
+                      nsContainerFrame*        aContainer,
+                      nsFrameItems            &aContained);
+
   // Builds the initial ScrollFrame
   already_AddRefed<nsStyleContext>
   BeginBuildingScrollFrame(nsFrameConstructorState& aState,
                            nsIContent*              aContent,
                            nsStyleContext*          aContentStyle,
                            nsContainerFrame*        aParentFrame,
                            nsIAtom*                 aScrolledPseudo,
                            bool                     aIsRoot,
diff --git a/layout/generic/moz.build b/layout/generic/moz.build
--- a/layout/generic/moz.build
+++ b/layout/generic/moz.build
@@ -118,16 +118,17 @@ UNIFIED_SOURCES += [
     'nsBlockFrame.cpp',
     'nsBlockReflowContext.cpp',
     'nsBlockReflowState.cpp',
     'nsBRFrame.cpp',
     'nsBulletFrame.cpp',
     'nsCanvasFrame.cpp',
     'nsColumnSetFrame.cpp',
     'nsContainerFrame.cpp',
+    'nsContainmentFrame.cpp',
     'nsFirstLetterFrame.cpp',
     'nsFlexContainerFrame.cpp',
     'nsFloatManager.cpp',
     'nsFontInflationData.cpp',
     'nsFrame.cpp',
     'nsFrameList.cpp',
     'nsFrameSetFrame.cpp',
     'nsFrameState.cpp',
diff --git a/layout/generic/nsContainmentFrame.cpp b/layout/generic/nsContainmentFrame.cpp
new file mode 100644
--- /dev/null
+++ b/layout/generic/nsContainmentFrame.cpp
@@ -0,0 +1,100 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+
+#include "nsContainmentFrame.h"
+
+#include "nsFrameManager.h"
+#include "nsLayoutUtils.h"
+#include "mozilla/AutoRestore.h"
+
+NS_IMPL_FRAMEARENA_HELPERS(nsContainmentFrame)
+
+#ifdef DEBUG
+NS_QUERYFRAME_HEAD(nsContainmentFrame)
+  NS_QUERYFRAME_ENTRY(nsContainmentFrame)
+NS_QUERYFRAME_TAIL_INHERITING(nsContainerFrame)
+#endif
+
+void
+nsContainmentFrame::Reflow(nsPresContext*           aPresContext,
+                           nsHTMLReflowMetrics&     aMetrics,
+                           const nsHTMLReflowState& aReflowState,
+                           nsReflowStatus&          aStatus)
+{
+  MarkInReflow();
+  DO_GLOBAL_REFLOW_COUNT("nsNumberControlFrame");
+  DISPLAY_REFLOW(aPresContext, this, aReflowState, aMetrics, aStatus);
+
+  nsIFrame* child = mFrames.FirstChild();
+  MOZ_ASSERT(child && !mFrames.FirstChild()->GetNextSibling(),
+             "nsContainmentFrame should have exactly one child");
+
+  nsHTMLReflowMetrics childDesiredSize(aReflowState);
+
+  WritingMode wm = aReflowState.GetWritingMode();
+  nscoord iSize = aReflowState.AvailableISize();
+  LogicalSize availSize(wm, iSize, NS_UNCONSTRAINEDSIZE);
+
+  nsHTMLReflowState childReflowState(aPresContext, aReflowState,
+                                     child, availSize);
+
+  // The child should act as though it has no contents.
+  if (childReflowState.ComputedBSize() == NS_UNCONSTRAINEDSIZE) {
+    childReflowState.SetComputedBSize(0);
+  }
+
+  // XXX Whether or not we can actually have an inline child is not speced yet.
+  bool inlineChild = child->StyleDisplay()->IsInlineOutsideStyle();
+  if (inlineChild) {
+    childReflowState.SetComputedISize(0);
+  }
+
+  // Ignore child's margin.
+
+  nsReflowStatus childStatus;
+  nscoord containerWidth = aReflowState.ComputedWidth();
+
+  // Child is at offset (0, 0), since we are responsible for it's margin, and
+  // we have not border or padding.
+  ReflowChild(child, aPresContext, childDesiredSize,
+              childReflowState, wm, LogicalPoint(wm, 0, 0), containerWidth, 0,
+              childStatus);
+  MOZ_ASSERT(NS_FRAME_IS_FULLY_COMPLETE(childStatus),
+              "We gave our child unconstrained height, so it should be complete");
+
+  // Place the child
+  FinishReflowChild(child, aPresContext, childDesiredSize,
+                    &childReflowState, wm, LogicalPoint(wm, 0, 0),
+                    containerWidth, 0);
+
+  // XXX See above.
+  if (inlineChild) {
+    aMetrics.SetBlockStartAscent(child->GetLogicalBaseline(wm));
+  } else {
+    aMetrics.SetBlockStartAscent(0);
+  }
+
+  // XXX Why can't the following use childReflowState.ComputedSize(wm)?
+  aMetrics.SetSize(wm, childReflowState.ComputedLogicalBorderPadding().Size(wm));
+
+  aMetrics.SetOverflowAreasToDesiredBounds();
+
+  ConsiderChildOverflow(aMetrics.mOverflowAreas, child);
+
+  FinishAndStoreOverflow(&aMetrics);
+
+  aStatus = NS_FRAME_COMPLETE;
+
+  NS_FRAME_SET_TRUNCATION(aStatus, aReflowState, aMetrics);
+}
+
+#ifdef DEBUG_FRAME_DUMP
+nsresult
+nsContainmentFrame::GetFrameName(nsAString& aResult) const
+{
+  return MakeFrameName(NS_LITERAL_STRING("Containment"), aResult);
+}
+#endif
diff --git a/layout/generic/nsContainmentFrame.h b/layout/generic/nsContainmentFrame.h
new file mode 100644
--- /dev/null
+++ b/layout/generic/nsContainmentFrame.h
@@ -0,0 +1,35 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef nsContainmentFrame_h___
+#define nsContainmentFrame_h___
+
+//#include "mozilla/Attributes.h"
+#include "nsFrame.h"
+
+class nsContainmentFrame final : public nsContainerFrame {
+public:
+  NS_DECL_FRAMEARENA_HELPERS
+#ifdef DEBUG
+  NS_DECL_QUERYFRAME_TARGET(nsContainmentFrame)
+  NS_DECL_QUERYFRAME
+#endif
+
+  nsContainmentFrame(nsStyleContext* aContext)
+    : nsContainerFrame(aContext)
+  {
+  }
+
+  virtual void Reflow(nsPresContext* aPresContext,
+                      nsHTMLReflowMetrics& aDesiredSize,
+                      const nsHTMLReflowState& aReflowState,
+                      nsReflowStatus& aStatus) override;
+
+#ifdef DEBUG_FRAME_DUMP
+  virtual nsresult GetFrameName(nsAString& aResult) const override;
+#endif // DEBUG
+};
+
+#endif /* nsContainmentFrame_h___ */
diff --git a/layout/generic/nsFrameIdList.h b/layout/generic/nsFrameIdList.h
--- a/layout/generic/nsFrameIdList.h
+++ b/layout/generic/nsFrameIdList.h
@@ -11,16 +11,17 @@ FRAME_ID(nsBoxFrame)
 FRAME_ID(nsBulletFrame)
 FRAME_ID(nsButtonBoxFrame)
 FRAME_ID(nsCanvasFrame)
 FRAME_ID(nsColorControlFrame)
 FRAME_ID(nsColumnSetFrame)
 FRAME_ID(nsComboboxControlFrame)
 FRAME_ID(nsComboboxDisplayFrame)
 FRAME_ID(nsContainerFrame)
+FRAME_ID(nsContainmentFrame)
 FRAME_ID(nsContinuingTextFrame)
 FRAME_ID(nsDeckFrame)
 FRAME_ID(nsDocElementBoxFrame)
 FRAME_ID(nsFieldSetFrame)
 FRAME_ID(nsFileControlFrame)
 FRAME_ID(nsFirstLetterFrame)
 FRAME_ID(nsFirstLineFrame)
 FRAME_ID(nsFlexContainerFrame)
diff --git a/layout/style/nsCSSAnonBoxList.h b/layout/style/nsCSSAnonBoxList.h
--- a/layout/style/nsCSSAnonBoxList.h
+++ b/layout/style/nsCSSAnonBoxList.h
@@ -56,16 +56,17 @@ CSS_ANON_BOX(page, ":-moz-page")
 CSS_ANON_BOX(pageContent, ":-moz-pagecontent")
 CSS_ANON_BOX(pageSequence, ":-moz-page-sequence")
 CSS_ANON_BOX(scrolledContent, ":-moz-scrolled-content")
 CSS_ANON_BOX(scrolledCanvas, ":-moz-scrolled-canvas")
 CSS_ANON_BOX(scrolledPageSequence, ":-moz-scrolled-page-sequence")
 CSS_ANON_BOX(columnContent, ":-moz-column-content")
 CSS_ANON_BOX(viewport, ":-moz-viewport")
 CSS_ANON_BOX(viewportScroll, ":-moz-viewport-scroll")
+CSS_ANON_BOX(containment, ":-moz-containment")
 
 // Inside a flex container, a contiguous run of text gets wrapped in
 // an anonymous block, which is then treated as a flex item.
 CSS_ANON_BOX(anonymousFlexItem, ":-moz-anonymous-flex-item")
 
 // Inside a grid container, a contiguous run of text gets wrapped in
 // an anonymous block, which is then treated as a grid item.
 CSS_ANON_BOX(anonymousGridItem, ":-moz-anonymous-grid-item")
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -5707,17 +5707,17 @@ nsRuleNode::ComputeDisplayData(void* aSt
       EnsureBlockDisplay(display->mDisplay);
 
       // Note that it's OK to cache this struct in the ruletree
       // because it's fine as-is for any style context that points to
       // it directly, and any use of it as aStartStruct (e.g. if a
       // more specific rule sets "float: none") will use
       // mOriginalDisplay, which we have carefully not changed.
     }
-    if (display->IsContainPaint() &&
+    if ((display->IsContainPaint() || display->IsContainLayout()) &&
         aRuleData->ValueForDisplay()->GetUnit() != eCSSUnit_Null) {
       // This is supposed to cause contain: paint and contain: layout elements
       // to become formatting contexts. However, exactly how the element is
       // supposed to become a formatting context has not been specified.  Most
       // likely, the intended behavior is similar to EnsureBlockDisplay,
       // except with 'inline' converts to 'inline block' instead of 'block'.
       // XXX This behavior is probably wrong in some cases; see bug 1179349.
       EnsureBlockDisplay(display->mDisplay);
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -2245,16 +2245,20 @@ struct nsStyleDisplay {
   bool IsScrollableOverflow() const {
     // mOverflowX and mOverflowY always match when one of them is
     // NS_STYLE_OVERFLOW_VISIBLE or NS_STYLE_OVERFLOW_CLIP.
     return mOverflowX != NS_STYLE_OVERFLOW_VISIBLE &&
            mOverflowX != NS_STYLE_OVERFLOW_CLIP &&
            !IsContainPaint();
   }
 
+  bool IsContainLayout() const {
+    return NS_STYLE_CONTAIN_LAYOUT & mContain;
+  }
+
   bool IsContainStyle() const {
     return NS_STYLE_CONTAIN_STYLE & mContain;
   }
 
   bool IsContainPaint() const {
     return NS_STYLE_CONTAIN_PAINT & mContain;
   }
 
diff --git a/layout/style/ua.css b/layout/style/ua.css
--- a/layout/style/ua.css
+++ b/layout/style/ua.css
@@ -519,8 +519,16 @@ div:-moz-native-anonymous.moz-custom-con
   position: fixed;
   top: 0;
   left: 0;
   width: 100%;
   height: 100%;
 
   z-index: 2147483648;
 }
+
+*|*::-moz-containment {
+  /* Due to the strange way containment frames are created, this actually
+   * inherits from the *child* of the containment frame.
+   * See BuildContainment() in nsCSSFrameConstructor.cpp for details.
+   */
+  display: inherit;
+}
