# HG changeset patch
# User Kyle Zentner <kzentner@mozilla.com>
# Parent  4570b8da08524aae39ca49a04797301abd5483e0
Bug 1178895 - Patch 1: Basic changes needed for all 'contain: layout' elements.

Turns 'contain: layout' elements into formatting contexts.
Add IsContainLayout helper function.

diff --git a/layout/base/nsLayoutUtils.cpp b/layout/base/nsLayoutUtils.cpp
--- a/layout/base/nsLayoutUtils.cpp
+++ b/layout/base/nsLayoutUtils.cpp
@@ -4122,16 +4122,34 @@ nsLayoutUtils::IsViewportScrollbarFrame(
   if (!IsProperAncestorFrame(rootScrollFrame, aFrame))
     return false;
 
   nsIFrame* rootScrolledFrame = rootScrollableFrame->GetScrolledFrame();
   return !(rootScrolledFrame == aFrame ||
            IsProperAncestorFrame(rootScrolledFrame, aFrame));
 }
 
+bool
+nsLayoutUtils::IsContainLayout(const nsIFrame* aFrame)
+{
+  if (aFrame->StyleDisplay()->mContain & NS_STYLE_CONTAIN_LAYOUT) {
+    return true;
+  }
+  if (aFrame->StyleContext()->GetPseudo() == nsCSSAnonBoxes::scrolledContent) {
+    // We need a non-const nsStyleContext* so that we can call StyleDisplay()
+    // on it.
+    nsStyleContext* parentStyle =
+      const_cast<nsStyleContext*>(aFrame->StyleContext()->GetParent());
+    MOZ_ASSERT(parentStyle,
+               "If we're scrolled content, we should have a parent scrollframe");
+    return parentStyle->StyleDisplay()->mContain & NS_STYLE_CONTAIN_LAYOUT;
+  }
+  return false;
+}
+
 static nscoord AddPercents(nsLayoutUtils::IntrinsicISizeType aType,
                            nscoord aCurrent, float aPercent)
 {
   nscoord result = aCurrent;
   if (aPercent > 0.0f && aType == nsLayoutUtils::PREF_ISIZE) {
     // XXX Should we also consider percentages for min widths, up to a
     // limit?
     if (aPercent >= 1.0f)
@@ -5579,16 +5597,19 @@ nsLayoutUtils::GetFirstLineBaseline(Writ
   return true;
 }
 
 /* static */ bool
 nsLayoutUtils::GetFirstLinePosition(WritingMode aWM,
                                     const nsIFrame* aFrame,
                                     LinePosition* aResult)
 {
+  if (nsLayoutUtils::IsContainLayout(aFrame)) {
+    return false;
+  }
   const nsBlockFrame* block = nsLayoutUtils::GetAsBlock(const_cast<nsIFrame*>(aFrame));
   if (!block) {
     // For the first-line baseline we also have to check for a table, and if
     // so, use the baseline of its first row.
     nsIAtom* fType = aFrame->GetType();
     if (fType == nsGkAtoms::tableOuterFrame) {
       aResult->mBStart = 0;
       aResult->mBaseline = aFrame->GetLogicalBaseline(aWM);
@@ -5662,16 +5683,19 @@ nsLayoutUtils::GetFirstLinePosition(Writ
   }
   return false;
 }
 
 /* static */ bool
 nsLayoutUtils::GetLastLineBaseline(WritingMode aWM,
                                    const nsIFrame* aFrame, nscoord* aResult)
 {
+  if (nsLayoutUtils::IsContainLayout(aFrame)) {
+    return false;
+  }
   const nsBlockFrame* block = nsLayoutUtils::GetAsBlock(const_cast<nsIFrame*>(aFrame));
   if (!block)
     // No baseline.  (We intentionally don't descend into scroll frames.)
     return false;
 
   for (nsBlockFrame::const_reverse_line_iterator line = block->rbegin_lines(),
                                              line_end = block->rend_lines();
        line != line_end; ++line) {
diff --git a/layout/base/nsLayoutUtils.h b/layout/base/nsLayoutUtils.h
--- a/layout/base/nsLayoutUtils.h
+++ b/layout/base/nsLayoutUtils.h
@@ -1465,16 +1465,29 @@ public:
             aCoord.GetCoordValue() == 0) ||
            (aCoord.GetUnit() == eStyleUnit_Percent &&
             aCoord.GetPercentValue() == 0.0f) ||
            (aCoord.IsCalcUnit() &&
             nsRuleNode::ComputeCoordPercentCalc(aCoord, nscoord_MAX) == 0 &&
             nsRuleNode::ComputeCoordPercentCalc(aCoord, 0) == 0);
   }
 
+  /*
+   * Returns true if aFrame should be treated as having "contain:layout".
+   *
+   * NOTE: In order for "contain:layout" to work on scroll framse, we need it
+   * to effectively inherit through to the scrolled frame. However, we can't
+   * _actually_ use CSS inheritance in ua.css to do this, or else other
+   * 'contain' values (e.g. "paint") would inherit through to scrolled frames
+   * as well, which would break things. So, instead of using real inheritance,
+   * we use this helper-function, which has a special case for scrolled frames.
+   * (If it weren't for this special case, this could live on nsStyleDisplay.)
+   */
+  static bool IsContainLayout(const nsIFrame* aFrame);
+
   static void MarkDescendantsDirty(nsIFrame *aSubtreeRoot);
 
   /*
    * Calculate the used values for 'width' and 'height' for a replaced element.
    *
    *   http://www.w3.org/TR/CSS21/visudet.html#min-max-widths
    */
   static mozilla::LogicalSize
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -5723,17 +5723,22 @@ nsRuleNode::ComputeDisplayData(void* aSt
 
       // Note that it's OK to cache this struct in the ruletree
       // because it's fine as-is for any style context that points to
       // it directly, and any use of it as aStartStruct (e.g. if a
       // more specific rule sets "float: none") will use
       // mOriginalDisplay, which we have carefully not changed.
     }
 
-    if (display->IsContainPaint()) {
+    // Note: We test for 'contain:layout' here by *directly* checking mContain,
+    // instead of using the more-correct & scrollframe-aware function
+    // nsLayoutUtils::IsContainLayout(). This is OK because in the case where
+    // mContain disagrees with the nsLayoutUtils function, the frame is a
+    // scroll frame, and thus already a formatting context.
+    if (display->IsContainPaint() || (display->mContain & NS_STYLE_CONTAIN_LAYOUT)) {
       // An element with contain:paint or contain:layout needs to "be a
       // formatting context". For the purposes of the "display" property, that
       // just means we need to promote "display:inline" to "inline-block".
       // XXX We may also need to promote ruby display vals; see bug 1179349.
 
       // It's okay to cache this change in the rule tree for the same
       // reasons as floats in the previous condition.
       if (display->mDisplay == NS_STYLE_DISPLAY_INLINE) {
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -2244,16 +2244,22 @@ struct nsStyleDisplay {
 
   bool IsScrollableOverflow() const {
     // mOverflowX and mOverflowY always match when one of them is
     // NS_STYLE_OVERFLOW_VISIBLE or NS_STYLE_OVERFLOW_CLIP.
     return mOverflowX != NS_STYLE_OVERFLOW_VISIBLE &&
            mOverflowX != NS_STYLE_OVERFLOW_CLIP;
   }
 
+  /*
+   * IsContainLayout() is located in nsLayoutUtils.h, since determining whether
+   * a frame is layout-contained may require looking at the parent's style
+   * (for scrolled frames).
+   */
+
   bool IsContainStyle() const {
     return NS_STYLE_CONTAIN_STYLE & mContain;
   }
 
   bool IsContainPaint() const {
     return NS_STYLE_CONTAIN_PAINT & mContain;
   }
 
