# HG changeset patch
# User Kyle Zentner <kzentner@mozilla.com>
# Parent  06be38afa9317ad64d3c9b9f38ea2dfcb620c608
Bug 1178895 - Patch 1: Basic changes needed for all 'contain: layout' elements.

Turns 'contain: layout' elements into formatting contexts.
Add IsContainLayout helper method.

diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -5723,17 +5723,17 @@ nsRuleNode::ComputeDisplayData(void* aSt
 
       // Note that it's OK to cache this struct in the ruletree
       // because it's fine as-is for any style context that points to
       // it directly, and any use of it as aStartStruct (e.g. if a
       // more specific rule sets "float: none") will use
       // mOriginalDisplay, which we have carefully not changed.
     }
 
-    if (display->IsContainPaint()) {
+    if (display->IsContainPaint() || display->IsContainLayout()) {
       // This is supposed to cause contain: paint and contain: layout elements
       // to become formatting contexts. However, exactly how the element is
       // supposed to become a formatting context has not been specified.
       // This behavior should be mostly correct, but ruby and table related
       // elements may need to be changed.
       // XXX This behavior is probably wrong in some cases; see bug 1179349.
       // It's okay to cache this change in the rule tree for the same
       // reasons as floats in the previous condition.
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -2244,16 +2244,20 @@ struct nsStyleDisplay {
 
   bool IsScrollableOverflow() const {
     // mOverflowX and mOverflowY always match when one of them is
     // NS_STYLE_OVERFLOW_VISIBLE or NS_STYLE_OVERFLOW_CLIP.
     return mOverflowX != NS_STYLE_OVERFLOW_VISIBLE &&
            mOverflowX != NS_STYLE_OVERFLOW_CLIP;
   }
 
+  bool IsContainLayout() const {
+    return NS_STYLE_CONTAIN_LAYOUT & mContain;
+  }
+
   bool IsContainStyle() const {
     return NS_STYLE_CONTAIN_STYLE & mContain;
   }
 
   bool IsContainPaint() const {
     return NS_STYLE_CONTAIN_PAINT & mContain;
   }
 
